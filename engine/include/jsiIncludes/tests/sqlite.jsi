#!/usr/local/bin/jsish -u %s

require('Sqlite');

var db, n, x, s, dbc;
;db = new Sqlite('testsql.db',{maxStmts:1000, readonly:false});

;db.eval('drop table IF EXISTS foo;');
try {
;   db.query('drop table foo;');
} catch(e) {
    //IGNORED
};

;db.eval('drop table IF EXISTS foo; create table foo(a,b);');
n = 0;
x = 99;
while (n++ < 3) {
    db.query('insert into foo values(@x,@n);');
    x -= 4;
}
db.query('select * from foo;', function (n) {
;   'B='+n.b + ', A='+n.a;
});

;db.query('select * from foo;');

;dbc = db.conf();
;db.profile(function(sql,time) { ;'EXECING: '+sql; });

;db.onecolumn('select a from foo where b == 2;');
;db.profile(null);
s = {b:2};

;db.query('select * from foo;');
;db.query('select * from foo;',{mode:'list'});
;db.query('select * from foo;',{mode:'list',headers:true});
;db.query('select * from foo;',{mode:'html'});
;db.query('select * from foo;',{mode:'html',headers:true});
;db.query('select * from foo;',{mode:'csv'});
;db.query('select * from foo;',{mode:'csv',headers:true});
;db.query('select * from foo;',{mode:'column'});
;db.query('select * from foo;',{mode:'column',headers:true});
;x=db.query('select * from foo;',{mode:'json'});
JSON.parse(x);
;x=db.query('select * from foo;',{mode:'json',headers:true});
JSON.parse(x);
;x=db.query('select * from foo;',{mode:'json2'});
JSON.parse(x);
;db.query('select * from foo;',{mode:'tabs'});
;db.query('select * from foo;',{mode:'tabs',headers:true});
;db.query('select * from foo;',{mode:'line'});
;db.query('select * from foo;',{mode:'insert'});

var binds;
;binds = [91,3];
;db.query('insert into foo values(?,?);', {varName:'binds'});
;db.query('insert into foo values(?,?);', {values:binds});
;db.query('insert into foo values(?,?);', {values:[91,3]});

;db.func('bar',function(n) { return n+'.000'; });


;db.trace(function(sql) { ;'TRACING: '+sql; });
;db.onecolumn('select bar(a) from foo where b == 2;');
;db.trace(null);

//;db.version();
delete db;


/*
var res1 = db.query('select * from table foo(a,b;';
for (i in res1) {
  ;"CONS: "+i.toString(); 
}


var curs, n;
for (curs = db.query('select * from table foo(a,b;'),
    (n = db.getresult(curs))!=undefined,
    db.nextresult(curs)) {
    ;n.toString();
}
db.endresult(curs;


*/

/*
=!EXPECTSTART!=
db = new Sqlite('testsql.db',{maxStmts:1000, readonly:false}) ==>  "#Sqlite_1"
db.eval('drop table IF EXISTS foo;') ==>  undefined
db.eval('drop table IF EXISTS foo; create table foo(a,b);') ==>  undefined
'B='+n.b + ', A='+n.a ==>  B=1, A=99
'B='+n.b + ', A='+n.a ==>  B=2, A=95
'B='+n.b + ', A='+n.a ==>  B=3, A=91
db.query('select * from foo;') ==>  [ { a:99, b:1 }, { a:95, b:2 }, { a:91, b:3 } ]
dbc = db.conf() ==>  { bindWarn:false, debug:[], errorCnt:0, forceInt:false, maxStmts:1000, mutex:"default", name:"", nocreate:false, numSort:0, numStep:2, numStmts:2, queryOpts:{ callback:null, cdata:null, headers:false, limit:0, mapundef:false, mode:"rows", nocache:false, nullvalue:null, separator:null, table:null, typeCheck:"convert", values:null, varName:null, width:undefined }, readonly:false, version:3018000, vfs:null }
db.profile(function(sql,time) { ;'EXECING: '+sql; }) ==>  undefined
db.onecolumn('select a from foo where b == 2;') ==>  95
db.profile(null) ==>  undefined
db.query('select * from foo;') ==>  [ { a:99, b:1 }, { a:95, b:2 }, { a:91, b:3 } ]
db.query('select * from foo;',{mode:'list'}) ==>  99|1
95|2
91|3
db.query('select * from foo;',{mode:'list',headers:true}) ==>  a|b
99|1
95|2
91|3
db.query('select * from foo;',{mode:'html'}) ==>  <TR><TD>99</TD><TD>1</TD></TR>
<TR><TD>95</TD><TD>2</TD></TR>
<TR><TD>91</TD><TD>3</TD></TR>
db.query('select * from foo;',{mode:'html',headers:true}) ==>  <TR><TH>a</TH><TH>b</TH></TR>
<TR><TD>99</TD><TD>1</TD></TR>
<TR><TD>95</TD><TD>2</TD></TR>
<TR><TD>91</TD><TD>3</TD></TR>
db.query('select * from foo;',{mode:'csv'}) ==>  99,1
95,2
91,3
db.query('select * from foo;',{mode:'csv',headers:true}) ==>  a,b
99,1
95,2
91,3
db.query('select * from foo;',{mode:'column'}) ==>  a          b          99         1         
95         2         
91         3         
db.query('select * from foo;',{mode:'column',headers:true}) ==>  a          b           
---------- ----------
99         1         
95         2         
91         3         
x=db.query('select * from foo;',{mode:'json'}) ==>  [ {"a":99, "b":1}, {"a":95, "b":2}, {"a":91, "b":3} ]
x=db.query('select * from foo;',{mode:'json',headers:true}) ==>  [ ["a", "b"], [99, 1], [95, 2], [91, 3] ]
x=db.query('select * from foo;',{mode:'json2'}) ==>  { "names": [ "a", "b" ], "values": [ [99, 1 ], [95, 2 ], [91, 3 ] ] } 
db.query('select * from foo;',{mode:'tabs'}) ==>  99	1
95	2
91	3
db.query('select * from foo;',{mode:'tabs',headers:true}) ==>  a	b
99	1
95	2
91	3
db.query('select * from foo;',{mode:'line'}) ==>      a = 99    b = 1
    a = 95
    b = 2
    a = 91
    b = 3
db.query('select * from foo;',{mode:'insert'}) ==>  INSERT INTO table VALUES(99,NULL);
INSERT INTO table VALUES(95,NULL);
INSERT INTO table VALUES(91,NULL);
binds = [91,3] ==>  [ 91, 3 ]
db.query('insert into foo values(?,?);', {varName:'binds'}) ==>  []
db.query('insert into foo values(?,?);', {values:binds}) ==>  []
db.query('insert into foo values(?,?);', {values:[91,3]}) ==>  []
db.func('bar',function(n) { return n+'.000'; }) ==>  undefined
db.trace(function(sql) { ;'TRACING: '+sql; }) ==>  undefined
db.onecolumn('select bar(a) from foo where b == 2;') ==>  95.000
db.trace(null) ==>  undefined
=!EXPECTEND!=
*/

