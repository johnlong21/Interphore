#!/usr/bin/env jsish
"use strict";
require('Sys');
require('Sqlite');
require('WebSocket');
// An sqlite browser user interface.

function Jsi_SqliteUI(files:array|string, opts:object=void)
{
    var options = { // Provide an sqlite user interface via a browser.
        browser     :'',                // Browser program to use.
        debug       :false,             // Debug output.
        foreignkey  :true,              // Enable foreign key constraints.
        integrity   :true,              // Do integrity check on startup.
        local       :true,              // Connections must be local.
        maxPort     :1000,              // Max ports to try.
        noCheck     :false,             // Disable typechecking.
        noGui       :false,             // Do not start local browser session.
        noUpdate    :false,             // Caller will provide update calls.
        port        :8765,              // Start search for free port from.
        sizeViews   :true,              // Return count(*) for views. 
        timeout     :10000,             // Grace time after last client exits before exit (in ms).
        trace       :false,             // Tracing output.
        wsdebug     :0                  // Debug websock.
    };
    var that = 
    {
        package:'Jsi_SqliteUI',  // For -h support
        debugging:false,      // Break in debugger on recv.
        integrityFail:null,
        foreignKeysFail:null,
        rootdir: null,                  // Where main.js lives.
        SJO : { mode: 'json2' },        // Sqlite mode.
        browsers: {                     // Not used, yet.
            unix:[ "xdg-open", "gnome-open", "firefox", "google-chrome" ],
            win: [ "start" ],
            mac: [ "open" ]
        },
        optdbfile: '~/.sqliteui.db',    // Store options, saved queries, etc.
        optSchema :
            "CREATE TABLE IF NOT EXISTS dbfiles (file);" +
            "CREATE TABLE IF NOT EXISTS saved_queries (query NOT NULL, dbID NOT NULL);" +
            "CREATE UNIQUE INDEX IF NOT EXISTS savedq_idx ON saved_queries(query, dbID);"
    };
    
    Jsi_Opts(that, options, opts);

    function tvalsDelete(id:number, d:object)  //Handle submit of tvals action delete.
    {
        var q = 'DELETE FROM "'+d.table+'" WHERE rowid = '+d.rowid+';';
        that.db.query(q);
        WebSend(id,"tvalsDeleteAck",{result:true, tag:d.tag, table:d.table, from:'tvalsDelete'});
    }
    
    function dbAdd(id:number, d:object)  //Add a row.
    {
        var msg, __q, __v, n = 0, e, req = {success:true, did:'add', msg:''};
        __q = "INSERT INTO '"+d.table+"' (";
        __v = "";
        var res = d.res;
        for (var i in res) {
            if (n++) { __q += ","; __v +=  ","; }
            __q += "'"+i+"'";
            __v += "$res("+i+")";
        }
        __q += ") VALUES(" + __v + ");";
        try {
            that.db.query(__q);
        }
        catch (e) {
            req.msg = e;
            req.success = false;
        }
        WebSend(id, 'tvalsAddAck', req);
    }
    
    function tvalsSubmit(id:number, d:object)  //Handle submit of tvals action edit.
    {
        //puts("TS: "+d.toString());
        var cols = '', vals = '';
        var res = d.res, db = that.db;
        try {
            switch (d.tag) {
                case 'Delete':
                    var q = 'DELETE FROM "'+d.table+'" WHERE rowid = '+d.id+';';
                    //puts("QQ: "+q);
                    db.query(q);
                    break;
                case 'Add':
                case 'Duplicate':
                    for (var i in res) {
                        if (cols != '') { cols += ','; vals += ','; }
                        cols += '"'+i+'"';
                        vals += "$res("+i+")";
                    }
                    var q = 'INSERT INTO "'+ d.table+'" ('+cols+") VALUES("+vals+");";
                    db.query(q);
                    break;
                    
                case 'Update':
                    for (var i in res) {
                        if (vals != '') { vals += ','; }
                        vals += i+" = $res("+i+")";
                    }
                    var q = "UPDATE "+d.table+" SET "+vals+" WHERE rowid = "+d.id+";";
                    db.query(q);
                    break;
                default:
                    LogDebug("WTF: tvalsSubmit: "+d.tag);
            }
            WebSend(id,"tvalsSubmitAck",{result:true, tag:d.tag, table:d.table, from:'tvalsSubmit'});
        }
        catch (e) {
            WebSend(id,"tvalsSubmitAck",{result:false, msg:e});
        }
    }
    
    function loadTList(id:number)
    {
        var rc = {}, db = that.db;
        var lst = db.query('SELECT * FROM sqlite_master ORDER BY name;');
        that.dbinfo = {};
        for (var t in lst) {
            var l = lst[t];
            if (l.type === 'index') {
                lst[t].info = db.query('PRAGMA index_info("'+l.name+'")');
            }
            if (l.type !== 'table' && l.type !== 'view') continue;
            lst[t].index_list = db.query('PRAGMA index_list("'+l.name+'")');
            lst[t].size = ((that.sizeViews || l.type === 'table')?db.onecolumn('SELECT count(*) FROM "'+l.name+'"'):'');
            lst[t].info = db.query('PRAGMA table_info("'+l.name+'")');
            that.dbinfo[l.name] = l;
        }
        rc.db_list= db.query('PRAGMA database_list');
        if (that.optdb)        
            rc.savedq = that.optdb.eval("SELECT query FROM saved_queries WHERE dbID == $that(dbID)");
        rc.dbfile = that.dbfile;
        rc.dbtail = File.tail(that.dbfile);
        rc.dbdirname = File.dirname(that.dbfile);
        rc.integrityFail = that.integrityFail;
        rc.foreignKeysFail = that.foreignKeysFail;
        rc.lst = lst;
        that.dblist = lst;
        //puts("RR "+rc.toString());
        return rc;
    }
    
    function loadTable(id:number, req:object)
    {
       // debugger;
        try {
            var table = req.table;
            var lst = {};
            var cols = req.columns.trim(' ');
            if (cols === '') cols = 'rowid as rowid,*';
            else cols = 'rowid as rowid,'+cols;
            req.where = req.where.trim(' ');
            if (req.where !== '') req.where = ' WHERE '+req.where;
            if (req.orderby !== '') req.orderby = ' ORDER BY '+req.orderby;
            req.limit = parseInt(req.limit);
            if (req.limit === NaN || req.limit<=0) req.limit = 20;
            req.offset = parseInt(req.offset);
            if (req.offset === NaN || req.offset<=0) req.offset = 0;
            var query = 'select '+cols+' from "'+table+'" '+req.where;
            query += ' ' + req.orderby + ' limit '+req.limit;
            if (req.offset)
                query += ' offset '+req.offset;
            query += ';';
            //puts("QQ: "+query);
            //puts(req.opts);
            lst.data = that.db.query(query,req.opts);
            lst.opts = req.opts;
            lst.query = query;
            //puts("RD: "+lst.toString());
            lst.from = 'loadTable';
            WebSend(id,'loadTable', lst);
        }
        catch (e) {
            WebSend(id,'error', e);
        }
    }
    
    
    function runQuery(id:number, req:object)
    {
        try {
            var lst = {};
            lst.data = that.db.query(req.query, req.opts);
            lst.opts = req.opts;
            lst.from = 'runQuery';
            lst.replay = req.replay;
            WebSend(id,'loadTable', lst);
        }
        catch (e) {
            WebSend(id,'error', e);
        }
    }
    
    function saveQuery(id:number, req:object) // Save query to opt db.
    {
        if (!that.optdb) return;
        if (req.save)
            that.optdb.eval("INSERT OR REPLACE INTO saved_queries (query,dbID) VALUES($req(query),$that(dbID))");
        else
            that.optdb.eval("DELETE FROM saved_queries WHERE query == $req(query) AND dbID == $that(dbID)");
    }
    
    function dbLoad(id:number, req:object) // Open new view.
    {
        //Jsi_SqliteUI(req.dbFile, {noUpdate:true});
        setTimeout(function () { Jsi_SqliteUI(req.dbFile, {noUpdate:true}); }, 100);
        return;
    }
    
    function loadAll(id:number)
    {
        LogDebug("LOADALL");
        WebSend(id,'loadAll', loadTList(id));
    }
    
    function DoExit()   // Notify all going down, then exit.
    {
        WebSend(-1, 'exit');
        setTimeout(function () {exit(0); }, 1000); 
    }
    
    function CloseNow()
    {
        that.closeId = null;
        var wcnt = that.ws.conf('stats.connectCnt');
        LogDebug("Client connections left: " + wcnt);
        if (wcnt>0)
            return;
        that.ws.conf({noUpdate:true});
        that.done = 1;
    }
    
    function CloseLast()
    {
        // Wait around for a while for refresh or new clients before exiting
        LogDebug("Delaying for last to close");
        if (that.closeId)
            clearInterval(that.closeId);
        that.closeId = null;
        if (that.timeout>=0)
            that.closeId = setTimeout(function () { CloseNow(); }, that.timeout);
        return true;
    }
    
    /**********************/
    
    function WebSendRaw (id:number, cmd:string, data:object)
    {
        data = '{"cmd":"'+cmd+'", "data" : '+ data +'}';
        //puts("RAWSEND: "+data);
        that.ws.send(data,id);
    }
    
    function WebSend (id:number, cmd:string, data:object|string)
    {
        var dat = {cmd:cmd, data:data };
        dat = JSON.stringify(dat);
        LogTrace(dat);
        that.ws.send(dat, id);
    }
    
    function fileValid(fn:string, writing:boolean)
    {
        //return 'write to directory not permitted';
    }
    
    function dbRead(id:number, d:object)
    {
        var msg, e, req = {success:true, did:'read', msg:''}, fn = d.read_file;
        fn = fn.trim(' ');
        if (fn.length<=0) {
            req.success = false;
            req.msg = 'empty file name';
        } else if (!File.exists(fn)) {
            req.success = false;
            req.msg = 'can not find file: '+fn;
        } else if ((msg=fileValid(fn,false))) {
            req.success = false;
            req.msg = msg;
        } else {
            try {
    
                var str = File.read(fn);
                if (d.export_begin == "1") {
                    str = "BEGIN TRANSACTION;\n" + str + "\nCOMMIT;\n";
                }
                req.count  = that.db.eval(str);
            }
            catch (e) {
                req.msg = e;
                req.success = false;
            }
        }
        WebSend(id, 'DlgDone', req);
    }
    
    function dbImport(id:number, d:object)
    {
        var msg, e, req = {success:true, did:'import', msg:''}, fn = d.import_file;
        fn = fn.trim(' ');
        if (fn.length<=0) {
            req.success = false;
            req.msg = 'empty file name';
        } else if (!File.exists(fn)) {
            req.success = false;
            req.msg = 'can not find file: '+fn;
        } else if ((msg=fileValid(fn,false))) {
            req.success = false;
            req.msg = msg;
        } else {
            try {
                var opts = { conflict:d.import_conflict};
                var prefix = '', suffix = '';
                if (d.import_csv == "1")
                    opts.csv = true;
                if (d.import_headers == "1")
                    opts.headers = true;
                if (d.import_sep != '')
                    opts.separator = d.import_sep;
                if (d.import_limit != '')
                    opts.limit = parseInt(d.import_limit);
                if (d.import_null != '')
                    opts.nullvalue = d.import_null;
                req.count  = that.db.import(d.import_table, fn, opts);
            }
            catch (e) {
                req.msg = e;
                req.success = false;
            }
        }
        WebSend(id, 'DlgDone', req);
    }
    
    function dbExport(id:number, d:object)
    {
        var msg, e, req = {success:true, did:'export', msg:''}, fn = d.export_file;
        fn = fn.trim(' ');
        if (fn.length<=0) {
            req.success = false;
            req.msg = 'empty file name';
        } else if (File.exists(fn)) {
            req.success = false;
            req.msg = 'can not overwrite existing db file';
        } else if ((msg=fileValid(fn,true))) {
            req.success = false;
            req.msg = msg;
        } else {
            try {
                var opts = { mode:d.export_mode, table:d.export_table};
                var prefix = '', suffix = '';
                if (d.export_headers == "1")
                    opts.headers = true;
                if (d.export_sep != '')
                    opts.separator = d.export_sep;
                if (d.export_null != '')
                    opts.nullvalue = d.export_null;
                if (d.export_begin == "1") {
                    prefix = "BEGIN TRANSACTION;\n";
                    suffix = "\nCOMMIT;\n";
                }
                if (d.export_schema == "1")
                    prefix += that.db.onecolumn("SELECT sql FROM sqlite_master WHERE type = 'table' AND name = $d(export_schema)")+ "\n";
                var rc = that.db.query("SELECT * FROM '"+d.export_table+"'", opts);
                File.write(fn, prefix+rc+suffix);
            }
            catch (e) {
                req.msg = e;
                req.success = false;
            }
        }
        WebSend(id, 'DlgDone', req);
    }
    
    
    function dbBackup(id:number, d:object)
    {
        var e, req = {success:true, did:'backup', msg:''}, fn = d.backup_file;
        fn = fn.trim(' ');
        if (fn.length<=0) {
            req.success = false;
            req.msg = 'empty file name';
        } else if (File.exists(fn)) {
            req.success = false;
            req.msg = 'can not overwrite existing db file';
        } else {
            try {
                that.db.backup(fn, d.backup_db);
            }
            catch (e) {
                req.msg = e;
                req.success = false;
            }
        }
        WebSend(id, 'DlgDone', req);
    }
    
    function dbRestore(id:number, d:object)
    {
        var e, req = {success:true, did:'restore', msg:''}, fn = d.restore_file;
        fn = fn.trim(' ');
        if (fn.length<=0) {
            req.success = false;
            req.msg = 'empty file name';
        } else if (!File.exists(fn)) {
            req.success = false;
            req.msg = 'can not find db file';
        } else {
            try {
                that.db.restore(fn, d.restore_db);
            }
            catch (e) {
                req.msg = e;
                req.success = false;
            }
        }
        WebSend(id, 'DlgDone', req);
    }
    
    function fileBrowse(id:number, d:object)
    {
       var e, req = {success:true, did:'files', msg:''}, fn = d.files_dir;
        fn = fn.trim(' ');
        if (fn.length<=0) {
            req.success = false;
            req.msg = 'empty dir name';
        } else if (!File.isdir(fn)) {
            req.success = false;
            req.msg = 'can not find db file';
        } else {
            try {
                req.files = File.glob('*', {dir:fn, types:'f'}).sort();
                req.dirs = File.glob('*', {dir:fn, types:'d'}).sort();
                req.dir = fn;
            }
            catch (e) {
                req.msg = e;
                req.success = false;
            }
        }
        WebSend(id, 'fileBrowse', req);
    }

    function CheckIntegrity() {
        var db = that.db;
        that.integrityFail = true;
        try {
            var ok = db.onecolumn('PRAGMA integrity_check');
            if (ok == 'ok')
                that.integrityFail = false;
        } catch(e) {
            puts("FAILED INTEGRITY CHECK: "+e);
        }
        that.foreignKeysFail = true;
        try {
            that.foreignKeysInfo = db.query('PRAGMA foreign_key_check');
            if (that.foreignKeysInfo.length<=0)
                that.foreignKeysFail = false;
        } catch(e) {
            puts("FAILED FOREIGN KEY CHECK: "+e);
        }
    }
    
    function WebRecv(id:number, data:any)
    {
        var buf, buf0, buf1, buf2;
        LogDebug("SERVER GOT: "+ id +": "+data);
        if (that.debugging)
            debugger;
        var dat = JSON.parse(data);
        LogDebug("JSON: "+dat.toString());
        switch (dat.cmd) {
            case 'loadAll':     return loadAll(id);
            case 'loadTable':   return loadTable(id,dat.data);
            case 'runQuery':    return runQuery(id,dat.data);
            case 'saveQuery':   return saveQuery(id,dat.data);
            case 'reloadAcct':  return chgAcct(id);
            case 'tvalsSubmit': return tvalsSubmit(id,dat.data);
            case 'tvalsDelete': return tvalsDelete(id,dat.data);
            case 'chgAcct':     return chgAcct(id,dat.data);
            case 'reqStatus':   return WebSend(id,'status', {state:'starting', curAcct:-1});
            case 'dbLoad':      return dbLoad(id,dat.data);
            case 'dbExport':    return dbExport(id,dat.data);
            case 'dbImport':    return dbImport(id,dat.data);
            case 'dbBackup':    return dbBackup(id,dat.data);
            case 'dbRestore':   return dbRestore(id,dat.data);
            case 'dbRead':      return dbRead(id,dat.data);
            case 'dbAdd':       return dbAdd(id,dat.data);
            case 'fileBrowse':  return fileBrowse(id,dat.data);
            case 'exit':        DoExit(); break;
                
            default: LogDebug("unknown webmsg: "+dat.cmd); break;
        }
    }
        
    function main() {
        debugger;
        that.done = 0;
        var req = require("Jsi_SqliteUI", 1.0);
        if (!that.rootdir)
            that.rootdir=File.dirname(req.loadFile);
        if (files === undefined)
            throw("expected a db file argument");
        if (typeof(files) === 'string')
            that.dbfile = files;
        else
            that.dbfile = files[0];
        if (!File.exists(that.dbfile))
            throw("db file not found");
        that.db = new Sqlite(that.dbfile, {queryOpts: {nullvalue:'NULL'}});
        if (that.foreignkey) {
            that.db.query('PRAGMA foreign_keys = ON');
        }
        if (that.integrity)
            CheckIntegrity();
        var i;
        if (typeof(files) !== 'string') {
            for (i=1; i<files.length; i++) {
                var fn = files[i];
                var dbn = File.rootname(File.tail(fn));
                that.db.query("ATTACH DATABASE '"+fn+"' AS "+dbn);
            }
        }
        that.wsopts = {
            defaultUrl:'/html/main.htmli',
            port:that.port, 
            rootdir:that.rootdir, 
            onRecv:WebRecv, 
            onCloseLast:CloseLast, 
            debug:that.wsdebug
        };
        if (that.local) that.wsopts.interface = 'lo';
        /* Open websockets on first available port. */
        var i, emsg = '';
        for (i=0; i<that.maxPort; i++) {
            try {
                that.ws = new WebSocket(that.wsopts);
                break;
            }
            catch (e) {that.wsopts.port++; emsg=e;}
        }
        if (i>=that.maxPort) {
            throw("Failed to get port: "+emsg);
        }
        var nargs = null;
        if (that.noCheck)
            nargs = '{noCheck:true}';
        that.ws.handler('.htmli', 'Jsi_Htmlpp', nargs); // Associate .htmli with Web Pre-Processor (for. <? ... ?> tags).
        that.ws.handler('.jsi',   'Jsi_Jspp', nargs); // Associate .jsi with Pre-Processor for types.
        that.ws.handler('.cssi',  'Jsi_Csspp',  null);  // Associate .cssi with Pre-Processor for css.
        that.ws.handler('.md',    'Jsi_Markdown',  null);   // Associate .md with Pre-Processor for markdown.
        
        /* Setup options. */
        if (that.optdbfile && that.optdbfile != '') {
            that.optdb = new Sqlite(that.optdbfile);
            that.optdb.eval(that.optSchema);
            that.optdb.eval("INSERT OR REPLACE INTO dbfiles (file) VALUES($that(dbfile))");
            that.dbID = that.optdb.onecolumn("SELECT rowid FROM dbfiles WHERE file == $that(dbfile)");
        }
        
        LogDebug("Listen on "+that.wsopts.port);
        if (!that.noGui) {
            if (!that.browser.length) {
                switch (Info.platform().os) {
                    case 'win': that.browser = 'start';     break;
                    default:    that.browser = "xdg-open";  break;
                }
            }
            exec(that.browser + " http://127.0.0.1:"+that.wsopts.port+that.wsopts.defaultUrl+" &");
        }
    
        if (that.debugging)
            debugger;
        if (that.noUpdate)
            return that;
        while (that.done === 0 && Event.update(10) ) {} // Loop processing events.
        LogDebug("Done!");
        if (that.optdbfile)
            delete that.optdb;
        delete that.db;
        delete that.ws;
        return 0;
    }
    
    return main();
}

provide("Jsi_SqliteUI", 1.1);

if (Info.isMain()) {
    exit(Jsi_Main('Jsi_SqliteUI'));
}
