<title>Logging</title>
<div id=wikitoc>
<ul>
<li>[#commands|Commands]</li>
<ul>
<li>[#puts|puts]</li>
<li>[#printf|printf(fmt,...)]</li>
<li>[#log|log(arg, ...)]</li>
<li>[#conlog|console.log(arg, ...)]</li>
<li>[#conlogf|console.logf(fmt, ...)]</li>
<li>[#assert|assert(expr, msg, noThrow)]</li>
</ul>
<li>[#logcmds|LogDebug]</li>
<ul>
<li>[#logbug|Debug Logging]</li>
<li>[#logenable|Enabling Logs]</li>
<li>[#lognoop|No-Op Arguments]</li>
<li>[#loglocal|Module Logging]</li>
<li>[#logmod|More Modules]</li>
<li>[#exec|Exec]</li>
<li>[#logopts|logOpts]</li>
</ul>
</ul>
</div>

Jsi applications facilitate debugging with statements [#logcmds|LogDebug], LogTrace, ....

These provide <b>log()</b> output, 
when run with <b>-debug/-trace</b>, but are otherwise
[#lognoop|NoOps].

<h3 id=commands>Commands</h3>
The low level output commands are:

    <table border='1' class=cmdstbl>
<tr><th>Command</th> <th>Description</th> </tr>
<tr><td>puts</td> <td>Quotes arguments to stdout</td><tr>
<tr><td>printf</td> <td>Formatted output to stdout</td><tr>
<tr><td>log</td> <td>Like <b>puts</b> but including file/line info</td><tr>
<tr><td>console.puts</td> <td>Like <b>puts</b> but outputs to stderr</td><tr>
<tr><td>console.log</td> <td>Like <b>log</b> but outputs to stderr</td><tr>
<tr><td>console.logf</td> <td>Like <b>console.log</b> but using printf formatting</td><tr>
<tr><td>assert</td> <td>When expression is false throw error (or output msg)</td><tr>
</table>

All commands except <b>printf</b> automatically add a newline.

See [./reference.wiki#System|System] and [./reference.wiki#console|console].

<h4 id=puts>puts</h4>

The <b>puts</b> command quotes all of it's arguments and outputs them to stdout. eg.

    <nowiki><pre class=verbatim>
<b>puts</b>(<i>"Batman begins"</i>);
<b>var</b> X = {a:1, b:<i>"two"</i>};
<b>puts</b>(X);
<b>puts</b>(X.a, X.b);
</pre></nowiki>
    <nowiki><pre class=verbatim_out>
Batman begins
{ a:1, b:"two" }
1 two
</pre></nowiki>

<h4 id=printf>printf(fmt,...)</h4>

The <b>printf</b> command processes arguments according to format and outputs to stdout. eg.

    <nowiki><pre class=verbatim>
<b>printf</b>(<i>"Batman begins: %d %s\n"</i>, X.a, X.b);
</pre></nowiki>


<h4 id=log>log(arg, ...)</h4>

The <b>log</b> command is like <b>puts</b>, but includes the current file, line and function.

    <nowiki><pre class=verbatim>
<b>log</b>(<i>"Batman begins"</i>);
</pre></nowiki>
    <nowiki><pre class=verbatim_out>
"Batman begins", file.jsi:12, func()
</pre></nowiki>

<h4 id=conlog>console.log(arg, ...)</h4>

The <b>console.log</b> is exactly like <b>log</b>, but output goes to stderr.

    <nowiki><pre class=verbatim>
<b>console.log</b>(<i>"Batman begins"</i>);
</pre></nowiki>

<h4 id=conlogf>console.logf(fmt, ...)</h4>

The <b>console.logf</b> is like <b>printf</b> and <b>log</b>, but it outputs to stderr
and includes the current file, line and function with newline:

    <nowiki><pre class=verbatim>
<b>console.logf</b>(<i>"Batman begins: %d %s"</i>, X.a, X.b);
</pre></nowiki>

<hr>

<h4 id=assert>assert(expr, msg, noThrow)</h4>

<b>assert(expr:boolean|number|function, msg:string, noThrow=false)</b>

The <b>assert</b> command is used for constraint checking.
When disabled (the default) none of it's arguments get evaluted.

When enabled and the expression evaluates to false, an error is thrown, eg.

    <nowiki><pre class=verbatim>
<i>"use asserts"</i>;
<b>var</b> m = 1, n = -1;
<b>assert</b>(m>0, <i>"too small"</i>);
<b>assert</b>(n>=0 && n<100, <i>"passed bad n"</i>, true);
</pre></nowiki>

If expression is a function, the invocations returned value is used.

Thus the following outputs <b>0</b> when assert is disabled.

    <nowiki><pre class=verbatim>
<b>var</b> m = 0;
<b>assert</b>(++m>0);
<b>puts</b>(m);
</pre></nowiki>

When the argument <b>noThrow</b> is true, 
assert just outputs a message along with current file, line and function.

It can also be made to output a message rather than throw an error.

<hr>


<h3 id=logcmds>LogDebug</h3>

The logging facilitity in Jsi provides output messages that are particularly useful for
debugging applications,
because output messages include the file and line number:

    <nowiki><pre class=verbatim>
<b>var</b> i = 0;
<b>while</b>  (i++ < 3) {
    LogInfo(<i>"test loop: %d"</i>, i);
}
</pre></nowiki>
    <nowiki><pre class=verbatim_out>
mytest.jsi:3, "INFO:  test loop: 1", 
mytest.jsi:3, "INFO:  test loop: 2", 
mytest.jsi:3, "INFO:  test loop: 3", 
</pre></nowiki>

This can be useful when running scripts from [./usingjsi.wiki#geany|geany], where you can navigate
through the messages just as you would compiler warnings.

The available Log commands are:

    <table border='1' class=cmdstbl>
<tr><th>Command</th> <th>Notes</th> </tr>
<tr><td>LogDebug</td> <td>Outputs only when [#logopts|logOpts].<b>debug</b> is true</td><tr>
<tr><td>LogTrace</td> <td>Outputs only when logOpts.<b>trace</b> is true</td><tr>
<tr><td>LogTest</td> <td>Outputs only when logOpts.<b>test</b> is true</td><tr>
<tr><td>LogInfo</td> <td></td><tr>
<tr><td>LogWarn</td> <td></td><tr>
<tr><td>LogError</td> <td></td><tr>
<tr><td>LogFatal</td> <td></td><tr>
</table>

Remember that these commands use <b>printf</b> style formatting, so a percent should be
escaped with <b>%%</b>.

<h4 id=logbug>Debug Logging</h4>

The commands <b>LogDebug</b>, <b>LogTrace</b>, and <b>LogTest</b> are special in that
unless they are enabled,
there is no output.

We enable <b>LogDebug</b> with <b>"use debug"</b> as in this [../js-demos/log/mydebug.jsi|example]:

    <nowiki><pre class=verbatim>
<i>"use strict,debug,test"</i>;
<b>var</b> i = 0;
<b>while</b>  (i++ < 2) {
    <b>LogDebug</b>(<i>"test loop: %d"</i>, i);
    <b>LogTrace</b>(<i>"test loop: %d"</i>, i);
    <b>LogTest</b>(<i>"test loop: %d"</i>, i);
}
</pre></nowiki>
    <nowiki><pre class=verbatim_out>
mydebug.jsi:4, "DEBUG: test loop: 1", 
mydebug.jsi:5, "TRACE: test loop: 1", 
mydebug.jsi:4, "DEBUG: test loop: 2", 
mydebug.jsi:5, "TRACE: test loop: 2", 
</pre></nowiki>

In the discussion below, descriptions mentioning <b>LogDebug</b>
apply equally to <b>LogTrace</b>, and <b>LogTest</b>.

<h4 id=logenable>Enabling Logs</h4>

As shown above, one way logging can be enable is by inserting a <b>use</b> directive.

There are several other ways, such as from the command-line:

    <nowiki><pre class=verbatim>
jsish <b>-T debug,trace</b> mydebug2.jsi 
<b>JSI_INTERP_OPTS='{logOpts:{debug:true,trace:true}}'</b> jsish mydebug2.jsi
</pre></nowiki>

Note however that command-line options are overriden by <b>use</b> directives:

    <nowiki><pre class=verbatim>
<i>"use !debug"</i>;
<b>LogDebug</b>(<i>"can't appear"</i>);
</pre></nowiki>

Although, inside the script can also add:
    <nowiki><pre class=verbatim>
<b>Interp.conf</b>({logOpts:{debug:true,trace:true}});
</pre></nowiki>

<h4 id=lognoop>No-Op Arguments</h4>

It is important to understand that when disabled, the <b>LogDebug</b>
functions and their arguments are essentially No-Ops, as in this [../js-demos/log/myincr.jsi|example]:

    <nowiki><pre class=verbatim>
<b>var</b> i = 0, k = 0;
<b>while</b>  (i++ < 3) {
    <b>LogDebug</b>(<i>"test loop: %d, %d"</i>, i, k++);
}
printf("K=%d\n", k);
</pre></nowiki>

Running the above may seem confusing at first:
 
    <nowiki><pre class=verbatim>
<b>jsish myincr.jsi</b>
K=0;

<b>jsish -T debug myincr.jsi</b>
myincr.jsi:3, "DEBUG: test loop: 1, 0", 
myincr.jsi:3, "DEBUG: test loop: 2, 1", 
myincr.jsi:3, "DEBUG: test loop: 3, 2", 
K=3
</pre></nowiki>

But the explanation is simply that when
debugging is disabled, both calls and
<i>argument marshalling code</i> are elided and have no effect.

This may seem counter-intuitive, but it means that
code may be peppered with <b>LogDebug</b> commands while experiencing virtually
no runtime penalty (until enabled).

It also means any breakpoint set on a disabled <b>LogDebug</b> will be ignored.

<h4 id=loglocal>Module Logging</h4>

In a larger application it may be undesirable to turn on global logging.
Which is where module-local logging comes in.

Here is a minimal [./js-modules.wiki|module] ([../js-demos/log/mycall.jsi|mycall]):

    <nowiki><pre class=verbatim>
<b>function</b> mycall(args:array|string=void, opts:object=void) {
    var options = { debug: false, trace: false };
    var that = { cnt:0 };
    <b>Jsi_Opts</b>(that,options,opts);
    
    <b>LogDebug</b>(<i>"MYLOC 1: %s"</i>, args.join(','));
    <b>LogTrace</b>(<i>"MYLOC 2: %s"</i>, args.join(','));
}

<b>LogDebug</b>(<i>"MYGLOB 1"</i>);
<b>LogTrace</b>(<i>"MYGLOB 2"</i>);
if (Info.isMain())
    Jsi_Main(<i>'mycall'</i>);
</pre></nowiki>

which we run with local logging:

    <nowiki><pre class=verbatim>
<b>jsish mycall.jsi -debug true A B C</b>
mycall.jsi:6,   "DEBUG: test 1: A,B,C", mycall()

<b>jsish -T debug mycall.jsi -trace true A B C</b>
mycall.jsi:10,  "DEBUG: MYGLOB 1"
mycall.jsi:6,   "DEBUG: MYLOC 1: A,B,C", mycall()
mycall.jsi:7,   "TRACE: MYLOC 2: A,B,C", mycall()
</pre></nowiki>

This demonstrates that logging can be local, global or a mixture of both.


<h4 id=logmod>More Modules</h4>

Here is a more complete module [../js-demos/log/mytest1.jsi|mytest1] using <b>Jsi_Opts</b> and logging:

    <nowiki><pre class=verbatim>
<i>#!/usr/bin/env jsish</i>
<i>"use strict"</i>;
<b>function</b> mytest1(args:array, opts:object=void):object {
    var options = { // Here is my test.
        debug       :false,     // Debugging output
        trace       :false,     // Tracing output
        test        :false,     // Testing output
        label       :''         // Some other argument
    };
    var that = {
        count: 0
    };
    
    <b>Jsi_Opts</b>(that, options, opts);
    for (var msg of args) {
        that.count++;
        <b>LogDebug</b>(<i>"testing: %q"</i>, msg);
    }
    puts("Done");
    return that;
}

provide(<i>'mytest1'</i>);
LogDebug(<i>"Loading test1"</i>);

if (Info.isMain())
    Jsi_Main(<i>'mytest1'</i>);
</pre></nowiki>

This allows us to turn on module-local debugging from the command line:

    <nowiki><pre class=verbatim>
<b>jsish mytest1.jsi a b c</b>
Done

<b>jsish mytest1.jsi -debug true a b c</b>
mytest1.jsi:17, "DEBUG: testing: a", mytest1()
mytest1.jsi:17, "DEBUG: testing: b", mytest1()
mytest1.jsi:17, "DEBUG: testing: c", mytest1()
Done

<b>jsish mytest1.jsi -h</b>
/zvfs/lib/JsiUtil.jsi:121: error: throw: 
Here is my test.

Options/defaults:
    -debug      false       // Debugging output.
    -label      ""          // Some other argument.
    -test       false       // Testing output.
    -trace      false       // Tracing output.

ERROR
</pre></nowiki>

<h4 id=exec>Exec</h4>

By making your script executable, you can run it directly from Geany with F9.

Then you can employ <b>jsish</b> as an replacement for /usr/bin/env,
with support for arguments:

    <nowiki><pre class=verbatim>
<b>#!/usr/local/bin/jsish</b> -T debug %s -trace true myinput1.txt
puts(console.args.join(' '));
</pre></nowiki>


See [./usingjsi.wiki#shell|Shell]

<hr>

<h4 id=logopts>Interp logOpts</h4>
The interp option [./reference.wiki#logOptsOptions|logOpts] is used to control when the above commands are
to output the current file, line and function.

It can also arrange for all such messages to be directed to a log file.

If you are debugging a program and need to find where a puts is coming from, try adding to the top

    <nowiki><pre class=verbatim>
<b>Interp.conf</b>({logOpts:{puts:<b>true</b>}});
</pre></nowiki>


The same can be done from the command-line [../tests/assert.jsi?mimetype=application/javascript|eg]:

    <nowiki><pre class=verbatim>
<i>"use asserts"</i>;
<b>JSI_INTERP_OPTS=<i>'{logOpts:{puts:true}}'</i>   jsish tests/assert.js</b>
"caught error" --> assert.js:16
"K" --> assert.js:24
"caught error2" --> assert.js:28
"this assert failed" --> assert.js:31
"assert also failed" --> assert.js:34
"done" --> assert.js:36
</pre></nowiki>

The <b>Jsi_LogFile()</b> command can be used to send logging to a file.

<hr>

