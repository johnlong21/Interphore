<title>Functions</title>

<div id=wikitoc>
<ul>
<li>[./index.wiki|Index]</li>
<li>[./reference.wiki|Reference]</li>
</ul>
<hr style="border-style:solid">
<ul>
<li>[#types|Overview]</li>
<li>[#availtypes|Type Names]</li>
<li>[#mulitypes|Type Unions]</li>
<li>[#argcounts|Counts]</li>
<li>[#defvalue|Defaults]</li>
<li>[#void|void/undefined]</li>
<li>[#checkconfig|Checking]</li>
<li>[#limits|Limitations]</li>
<li>[#misc|Miscellaneous]</li>
</ul>
</div>

<h2 id=types>Overview</h2>


A Jsi function may have parameters with <b>types</b> and/or <b>default values</b> eg.

    <nowiki><pre class=verbatim>
<i>#!jsish</i>
function foo (a<b>:number</b>, b<b>:string</b>=<i>'ok'</i>)<b>:number</b> {
   return a+1;
}
<i>foo('a', 9, 10);</i>
</pre></nowiki>

which upon invocation outputs:

    <nowiki><pre class=verbatim_out>
/tmp/foo.js:4: <b>warning:</b> got 3 args, expected 1-2, calling function foo(a:number, b:string="ok")    (at or near "a")

/tmp/foo.js:4: <b>warning:</b> type mismatch for argument arg 1 'a':  "string" is not a "number"    (at or near "a")

/tmp/foo.js:4: <b>warning:</b> type mismatch for argument arg 2 'b':  "number" is not a "string"    (at or near "a")

/tmp/foo.js:2: <b>warning:</b> type mismatch returned from 'foo':  "string" is not a "number"    (at or near "a")
</pre></nowiki>


Types are not supported for javascript variables, only function parameters/returns.

Limiting types to <i>the function interface</i> strikes a fine balance between flexibility and control.

<b>Note:</b> warnings are enabled by either of <b>"use strict";</b> or <b>"#!"</b>:
See [#checkconfig|Checking].


<hr>
<h2 id=availtypes>Type Names</h2>

Supported types are:

    <table border='1' class=cmdstbl>
<tr><th>Type</th> <th>Description</th></tr>
<tr><td>number</td><td>A double floating point value</td><tr>
<tr><td>boolean</td><td>A boolean value</td><tr>
<tr><td>string</td><td>A string value</td><tr>
<tr><td>function</td><td>A javascript function</td><tr>
<tr><td>object</td><td>A javascript object</td><tr>
<tr><td>array</td><td>A javascript array</td><tr>
<tr><td>regexp</td><td>A regular expression</td><tr>
<tr><td>userobj</td><td>A userobj command, eg. from <i>new Socket()</i></td><tr>
<tr><td>null</td><td>A javascript <i>null</i></td><tr>
<tr><td>undefined</td><td>A value that is undefined</td><tr>
<tr><td>void</td><td>Argument ommitted/no value returned</td><tr>
<tr><td>any</td><td>Means any value is accepted/returned</td><tr>
</table>

All type names are the same as returned from <b>typeof</b>, except <b>void</b> and <b>any</b>.

<b>void</b> is used to indicate a function returns nothing:

    <nowiki><pre class=verbatim>
function foo (a:number)<b>:void</b> {
   return;
}
</pre></nowiki>

and <b>any</b> for an unspecified type:

    <nowiki><pre class=verbatim>
function foo (n)<b>:any</b> {
   return (n?99:"Ok");
}
</pre></nowiki>

<hr>
<h2 id=mulitypes>Type Unions</h2>

<b>Unions</b> are multiple types separated with a pipe <b>"|"</b> character. eg:

    <nowiki><pre class=verbatim>
function foo (a<b>:number</b>, b<b>:number|string|boolean</b>) {
    var typ = (typeof b);
    switch (typ) {
        case <i>"number"</i>: return b+1;
        case <i>"string"</i>: return b;
        case <i>"boolean"</i>: return -1;
        default: throw <i>"unhandled type: "</i>+typ;
    }
}
foo(9,'a');
foo(9,9);
foo(9,true);
</pre></nowiki>

A return type may also be a <b>union</b>:

    <nowiki><pre class=verbatim>
function foo (x)<b>:number|string</b> {
    return x+x;
}
</pre></nowiki>

[./reference.wiki|Builtin commands] frequently
use union types.


<hr>
<h2 id=argcounts>Counts</h2>

Standard javascript does not complain when the number arguments in a function call
do not match the parameter list.

This is also true in Jsi, except when a function is </b>typed</b>:

    <nowiki><pre class=verbatim>
<b>function</b> foo (a:number, b:number):number {
   <b>return</b> a+1;
}
foo(9);
</pre></nowiki>

The presence of a type activates checking for that function, generating warnings like:

    <nowiki><pre class=verbatim_out>
/tmp/ss.js:4: <b>warning:</b> incorrect arg count in function call <i>"foo()"</i>: got 1 args, but expected 2
</pre></nowiki>

Extra argument warnings can be avoided by adding an ellipsis "<b>...</b>":

    <nowiki><pre class=verbatim>
<b>function</b> fool (a:number, b:number, <b>...</b>) {
   <b>return</b> console.args.length;
}
foo(9,9,9);
</pre></nowiki>

It is also possible to enable argument count checking for untyped functions,
by setting <b>typeCheck</b> mode [#checkconfig|<b>all</b>].

<hr>
<h2 id=defvalue>Defaults</h2>

<i>Default values</i> allow functions to be called with fewer parameters, as in:

    <nowiki><pre class=verbatim>
function foo (a, <b>b=1</b>) {}
function bar (<b>a=1, b=2</b>) {}
foo(9);
bar();
</pre></nowiki>

A default value must be one of the primitives:

    <table border='1' class=cmdstbl>
<tr><th>Type</th> <th>Description</th></tr>
<tr><td>number</td><td>A double floating point value</td><tr>
<tr><td>boolean</td><td>A boolean value</td><tr>
<tr><td>string</td><td>A string value</td><tr>
<tr><td>null</td><td>The <i>null</i> value</td><tr>
<tr><td>undefined</td><td>An <i>undefined</i> value/var</td><tr>
<tr><td>void</td><td>Argument may be ommitted</td><tr>
</table>

Also note that when a parameter is given a default value, all following it must as well,
possibly using <b>void</b>:

    <nowiki><pre class=verbatim>
function bar (<b>a=1, b=true, c=<i>'ok'</i>, d=null, e=void, f=void</b>) {}
</pre></nowiki>

Assigning a default value also implicitly assigns a type (except <b>void</b>).
Thus the following are equivalent:

    <nowiki><pre class=verbatim>
function quick(<b>a:number=1</b>) {}
function quick(<b>a=1</b>) {}
</pre></nowiki>

Types are or'ed, meaning the following accepts <b>string</b> as well:

    <nowiki><pre class=verbatim>
function duck(<b>a:number|boolean='quack'</b>) {}
</pre></nowiki>

<hr>
<h2 id=void>void/undefined</h2>

A <i>default-value</i> of <b>void</b> is used to indicate that an argument may be ommitted.

However, this will still complain about calls with an undefined <b>var</b> argument:

    <nowiki><pre class=verbatim>
#!
function bag(a=<b>void</b>) {}
<b>var</b> xyz;
bag(); <i>//OK</i>
bag(xyz);
</pre></nowiki>

Output is:

    <nowiki><pre class=verbatim_out>
/tmp/big.jsi:5: warning: call with undefined var for argument arg 1 'a
</pre></nowiki>


To allow this, use a default-value of <b>undefined</b> instead:

    <nowiki><pre class=verbatim>
#!
function fig(a=<b>undefined</b>) {}
function bag(a=<b>void</b>) {
    fig(a);
}
</pre></nowiki>

<hr>
<h2 id=checkconfig>Checking</h2>

Type checking is used to issue warnings/errors for incorrect calls to a typed function.

When checking is enabled,
it is applied to any function containing at least one <i>type</i> or <i>default value</i>, eg:

    <nowiki><pre class=verbatim>
<i>#!jsish</i>
function foo (a<b>:number</b>, b<b>:string</b>=<i>'ok'</i>)<b>:number</b> {}
</pre></nowiki>

In Jsi, the default checking state is:

  *  For interactive mode: <b>warn</b>.
  *  For scripts: <b>disabled</b>.

There are several way a script can control type-checking:

  *  Script has <b>#!</b> on the first line, the checking defaults to <b>parse,run,all</b>.
  *  Script sets it with a <b>"use"</b> directive on the first line (or second after a <b>#!</b>).
  *  Script is run with the <b>-T</b> option.
  *  Script is run with the <b>JIS_INTERP_OPTS='{typeCheck:</b>XXX<b>}'</b> env var.
  *  Use of <b>Interp.conf({typeCheck:</b>XXX<b>})</b> in the code.

The <b>"use"</b> directive
can take multiple comma separated options:

    <nowiki><pre class=verbatim>
<i>"use run,error"</i>;
function foo (a<b>:number</b>, b<b>:string</b>=<i>'ok'</i>)<b>:number</b> {}
</pre></nowiki>

But note again that this must be on the first line (or 2nd if using <b>#!</b>).

Here is the list of modes accepted by <b>use</b>:

    <table border='1' class=cmdstbl>
<tr><th>Type</th> <th>Description</th></tr>
<tr><td>parse</td> <td>Turn on parse-time checking</td></tr>
<tr><td>run</td> <td>Turn-on run-time checking</td></tr>
<tr><td>all</td> <td>Both <b>parse</b> and <b>run</b>, plus argument checking for untyped functions</td></tr>
<tr><td>error</td> <td>Runtime warnings are errors</td></tr>
<tr><td>strict</td> <td>Same as <b>all</b> and <b>error</b></td></tr>
<tr><td>proto</td> <td>Emit warnings for named function calls with no prior declaration</td></tr>
<tr><td>noundef</td> <td>Disable strict warnings for calls to function with <b>void</b> passed an undefined var</td></tr>
<tr><td>nowith</td> <td>Disable using <b>with</b> expressions</td></tr>
<tr><td>asserts</td> <td>Enable run-time <b>assert()</b> checking (See [./js-logging.wiki#assert|assert])</td></tr>
<tr><td>debug</td> <td>Enable <b>LogDebug()</b> output (See [./js-logging.wiki|logging])</td></tr>
<tr><td>trace</td> <td>Enable <b>LogTrace()</b> output</td></tr>
<tr><td>test</td> <td>Enable <b>LogTest()</b> output</td></tr>
</table>


The "<b>!</b>" prefix can be used to invert a flag:

    <nowiki><pre class=verbatim>
<i>"use strict,!error"</i>;
</pre></nowiki>

Modes may also be set from the command-line:

    <nowiki><pre class=verbatim>
jsish <b>-T parse,run</b> foo.jsi;    # Perform checking at parse and run time.
</pre></nowiki> 


Type-check mode can also be changed via [./js-interp.wiki|Interp.conf()]:

    <nowiki><pre class=verbatim>
Interp.conf({<b>typeCheck</b>:[<i>'error','run','parse'</i>]}); <i>// Promote warnings to errors .</i>
</pre></nowiki>

And finally, via the environment:

    <nowiki><pre class=verbatim>
JSI_INTERP_OPTS='{<b>typeCheck</b>:[<i>"error","run","parse"</i>]}' jsish script.jsi
</pre></nowiki>


Note that by default after 50 warnings, type checking is silently disabled. But this can be changed with:

    <nowiki><pre class=verbatim>
Interp.conf({<b>typeWarnMax</b>:0}); <i>// Unlimited warnings.</i>
</pre></nowiki>


<hr>
<h2 id=limits>Limitations</h2>

Although <b>parse time</b> checking is enabled with [./debug.wiki|"use strict"],
this is no-where close to the kind of type-checking available in <b>C</b>.

The first reason for this is that a javascript variable used as a function argument
can not be statically type-checked, because their type is dynamic.  This means only primitives can be checked.

Secondly, calls to a function can not be <b>parse</b>-checked prior to that functions actual definition
(or forward declaration) as in:

    <nowiki><pre class=verbatim>
function <b>f(a:number):number</b>{} <i>// Forward declaration.</i>

function b() {
    f(1,2);
}

function <b>f(a:number):number</b> {
    return a+1;
}
</pre></nowiki>

All builtin functions have prototypes, and therefore can be statically checked.

<hr>
<h2 id=misc>Miscellaneous</h2>

The rules for defining types in functions are:

  #  Zero or all parameters should be given <b>types</b>.
  #  <b>Default</b> values must be <b>primitives</b>.
  #  If a parameter is given a <b>default value</b>, all parameters following it must as well.
  #  Only functions with at least one <b>type</b> will be type-checked (except in mode <b>all</b>).

If a function has no types or defaults, it is by default treated as normal javascript,
and there will be no type-checking.


Note in [./reference.wiki|reference] that
builtin commands make extensive use of <b>typing</b>.
In the Jsi code-base, these apply to:

  *  C-Command declarations via <b>Jsi_CmdSpec</b>.
  *  C-Option declarations via <b>Jsi_OptionSpec</b>.
  *  <b>Sqlite</b> and <b>MySql</b> parameter bindings.
