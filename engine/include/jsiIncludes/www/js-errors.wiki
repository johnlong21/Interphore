<title>Errors</title>

<div id=wikitoc>
<ul>
<li>[./index.wiki|Index]</li>
<li>[./reference.wiki|Reference]</li>
</ul>
<hr style="border-style:solid">
<ul>
<li>[#trycatch|Try/Catch]</li>
<li>[#errdiag|Error Diagnostics]</li>
<li>[#introspec|Method Introspection]</li>
<li>[#args|Displayed Arguments]</li>
</ul>
</div>

<h4 id=trycatch>Try/Catch</h4>

Upon error in a <b>try</b>, <b>catch</b> is passed a string rather than an object, eg.

    <nowiki><pre class=verbatim>
<b>try</b> { badcall(); } <b>catch</b>(e) { <b>puts</b>(<i>"Note e is a string: "</i>+e); }
</pre></nowiki>

<h4 id=errdiag>Error Diagnostics</h4>

Jsi does not generate tracebacks upon error.  Instead it provides gcc style warnings that
contain the file and line number.
For example:

    <nowiki><pre class=verbatim>
<b>var</b> x = 1;
<b>foo</b>(x)
</pre></nowiki>

This results in the following diagnostic:

    <nowiki><pre class=verbatim>
/home/user/myjsi/foo.js:2: error: <i>'foo'</i>, sub-commands are: <b>Array Boolean Date File 
   Function Interp JSON Math Number Object RegExp Sqlite String Websocket alert 
   assert clearInterval console decodeURI encodeURI exit file format include info
   isFinite isNaN load parseFloat parseInt puts quote setInterval setTimeout signal
   sys util zvfs</b>.
</pre></nowiki>

The file and line number is reported, as well as an enumeration of known commands 
in the given scope. 
This allows errors to be [./editors.wiki|parsable by IDE's]. 


<h4 id=introspec>Method Introspection</h4>

Upon error, an objects sub-methods are enumerated, if possible:

    <nowiki><pre class=verbatim>
# <b>Info</b>.xx()
error: <i>'info'</i>, sub-commands are: <b>cmds data error events executable funcs
    named platform revisions script vars version</b>.    (at or near string <i>"xx"</i>)
</pre></nowiki>

<h4 id=args>Displayed Arguments</h4>

And arguments to builtin methods part of the diagnostic:

    <nowiki><pre class=verbatim>
# <b>format()</b>
error: missing args, expected <i>"format(format?,arg,arg?)"</i>
</pre></nowiki>


