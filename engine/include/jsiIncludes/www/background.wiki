<title>Background</title>

<div id=wikitoc>
<ul>
<li>[./index.wiki|Index]</li>
<li>[./reference.wiki|Reference]</li>
</ul>
<hr style="border-style:solid">
<ul>
<li>[#origin|Design and Origin]</li>
<li>[#glue|Glue Language]</li>
<li>[#ecma|ECMA Compatibilty]</li>
<li>[#goals|Goals]</li>
<li>[#todo|Shortcomings]</li>
<li>[#rational|Rational]</li>
</ul>
</div>

<h2 id=origin>Design and Origin</h2>

Jsi is a byte-code oriented interpreter designed for interfacing-with, and embedding-in C.

This makes it very different from [https://nodejs.org|Node-js] which is a compiler written in <b>C++</b>,
and which is not designed to be embedded.

Jsi is <b>C</b>-centric whereas Node is <b>JS</b>-centric.  Meaning that with Jsi, the locus of
control can resides in C-code.

Although Jsi was originally was based off source from [https://code.google.com/archive/p/quad-wheel|quad-wheel],
it is now internally modelled after [https://www.tcl.tk/doc/scripting.html|Tcl].


<hr>
<h2 id=glue>Glue Language</h2>

Like Tcl, Jsi is designed to be used a glue language,
where only time critical code is implement as <b>C</b> extensions because:

  *  Script code tends to be easier to write, more compact, and more resilient than C.
  *  Therefore script is used when speed of implementation trumps speed of execution.
  *  Efforts to increase software integrity can focus on <i>hardening extensions</i>.
  *  Moreover, extensions and scripts can greatly facilitate <b>C</b>-[./testing.wiki|Testing].
  *  Finally [./c-jsi_lite.wiki|C-only development] is also available.

<hr>

<h2 id=ecma>ECMA Compatibilty</h2>

Jsi implements version 5.1 of the
[http://www.ecma-international.org/ecma-262/5.1/Ecma-262.pdf|Ecma-script 262 standard],
with the following deviations:

  *  Semicolons are not auto-inserted.
  *  Empty array/object elements are not supported, eg. <b><nowiki>[1,,3]</nowiki></b>.
  *  It is an error to use <b>return</b> inside the body of <b>try/catch/with</b>.
  *  <b>delete</b> works with more than just object properties.
  *  The <b>Error</b> object is unimplemented: the argument to <b>catch()</b> is just a string.
  *  The <b>Date</b> object is unimplemented: use <b>strftime/strptime</b>.
  *  The value of <b>typeof <nowiki>[]</nowiki></b> is <b>"array"</b> instead of <b>"object"</b>.
  *  UTF support is in-progress (meaning incomplete).
  
Extensions include:

  *  Select features from newer versions of the standard (eg. Array <b>of</b> and <b>forEach</b>).
  *  Functions supporting parameters with [./functions.wiki|types and defaults].
  *  Type-checking and [./testing.wiki|testing] support.
 
<hr>
<h2 id=goals>Goals</h2>

Following are principle goals  Jsi:

  *  Support embedded development using plain <b>C</b> (C99).
  *  Code also compile as <b>native GNU g++</b>, without use of <i>"extern C"</i>.
  *  Have as few dependencies as possible..
  *  Pass sanitize, and be generally free of value/object/memory leaks.
  *  Provide amalgamated source for simplified [./build.wiki#amalgamation|application integration] .
  *  Exposure of low-level functions in a <b>C-only</b> [./c-jsi_lite.wiki|Lite] version.
  *  Provide a [./debug.wiki|Debugger].
  *  Support [./web.wiki|Web] applications, particularly with database and websockets.
  *  Support [./js-zvfs.wiki|standalone applications] via self-mounting .zip.
  *  [./packages.wiki|Package] and [./c-extensions.wiki|extension] support.

Note that C-integration is the main priority here, not speed of script execution.

And while compiling as C++ is supported, it is mostly used for integrity checking.

<hr>
<h2 id=todo>Shortcomings</h2>

Following is a partial list of things that are either incomplete or unimplemented:

  *  Creation of a complete test suite for code-coverage.
  *  Run applications directly from fossil.
  *  A PostgreSql extension.
  *  Extension for libmicrohttpd for use in post.
  *  Support for libevent/libev.

<hr>
<h2 id=rational>Rational</h2>

  *  Desktop applications are held hostage by their user interface, be it QT, GTK, IOS or .NET.
  *  Increasingly web browsers are becoming the GUI, usually over the Internet. 
  *  Moderately complex applications often end up requiring some form of script support, eg. Lua.
  *  If an application employs a Web GUI, a script language already is being used: Javascript.
  *  Time, energy and resources can be saved by using the same language on both ends.
  *  In fact, the same scripts can even be run in both the browser and the app.
  *  JSON provides seamless data interchange, thus avoiding data structure compatibility issues. 


