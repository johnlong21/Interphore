execAsset("rpg.phore");

initRpgBattle();

function centerSpriteOnSprite(stays, moves) {
	moves.x = stays.x + stays.width/2 - moves.width/2;
	moves.y = stays.y + stays.height/2 - moves.height/2;
}

function stepTowards(source, target, onComplete, dur) {
	if (dur == undefined) dur = 0.2;
	var sourceSpr = source.sprite;
	var targetSpr = target.sprite;

	tween(sourceSpr, dur, {x: lerp(0.2, sourceSpr.x, targetSpr.x), y: lerp(0.2, sourceSpr.y, targetSpr.y)}, {onComplete: onComplete});
}

function moveUpTo(source, target, onComplete, dur) {
	if (dur == undefined) dur = 0.5;
	var sourceSpr = source.sprite;
	var targetSpr = target.sprite;

	var endX = gameWidth/2 - sourceSpr.width/2;
	var endY = gameHeight/2 - sourceSpr.height/2;
	endX = lerp(0.85, endX, targetSpr.x);
	endY = lerp(1, endY, targetSpr.y);

	tween(sourceSpr, dur, {x: endX, y: endY}, {onComplete: onComplete});
}

function moveBack(source, onComplete, dur) {
	if (dur == undefined) dur = 0.4;
	var sourceSpr = source.sprite;

	tween(sourceSpr, dur, {x: source.originX, y: source.originY}, {onComplete: onComplete});
}

function moveUnitInFrontOf(source, dest) {
	var sourceSpr = source.sprite;
	var destSpr = dest.sprite;

	sourceSpr.x = gameWidth/2 - sourceSpr.width/2;
	sourceSpr.y = gameHeight/2 - sourceSpr.height/2;

	sourceSpr.x = lerp(0.85, sourceSpr.x, destSpr.x);
	sourceSpr.y = lerp(1, sourceSpr.y, destSpr.y);
}


/// Player Spells
var fireball = createSpell();
fireball.name = "Fireball";
fireball.info = "Throws a fireball";
fireball.baseDamage = 1200;
fireball.cost = 70;
fireball.affinities = ["Fire"];
fireball.execute = function(source, target) {
	var spell = this;

	stepTowards(source, target, function() {
		var targetSpr = target.sprite;
		var spr = addRectImage(64, 64, 0xCC0000);
		spr.x = targetSpr.x + targetSpr.width/2 - spr.width/2;
		spr.y = targetSpr.y + targetSpr.height/2 - spr.height/2;
		tween(spr, 1, {scaleX: 3, scaleY: 3, alpha: 0}, {onComplete: function() {
			spr.destroy();
			spell.doPartialDamage(target, 1);
			moveBack(source, actionDone);
		}});
	});
};

var lightning = createSpell();
lightning.name = "Lightning";
lightning.info = "Hit an enemy with many lightning bolts";
lightning.baseDamage = 1000;
lightning.cost = 50;
lightning.affinities = ["Electric"];
lightning.execute = function(source, target) {
	var spell = this;

	stepTowards(source, target, function() {
		var targetSpr = target.sprite;
		var strikes = 10;
		var strikesArr = [];
		for (var i = 0; i < strikes; i++) strikesArr.push(i);
		strikesArr.forEach(function(i) {

			timer(i * 0.2, function() {
				var spr = addRectImage(32, gameHeight, 0xFFFF00);
				spr.x = targetSpr.x + targetSpr.width/2 - spr.width/2 + rndFloat(-50, 50);
				spr.y = 0;
				spell.doPartialDamage(target, 1/(strikes));
				tween(spr, 0.5, {alpha: 0}, {onComplete: function() {
					spr.destroy();
					if (i == strikesArr.length-1) moveBack(source, actionDone);
				}});
			});
		});
	});
};

var gutPunch = createSpell();
gutPunch.name = "Gut Punch";
gutPunch.info = "A strong generic attack";
gutPunch.baseDamage = 500;
gutPunch.isAttack = true;
gutPunch.execute = function(source, target) {
	var spell = this;
	var sourceSpr = source.sprite;
	var targetSpr = target.sprite;

	var endX = lerp(0.65, sourceSpr.x, targetSpr.x);
	var endY = lerp(0.90, sourceSpr.y, targetSpr.y);

	tween(sourceSpr, 1, {x: endX, y: endY}, {onComplete: function() {
		tween(sourceSpr, 0.5, {x: targetSpr.x}, {ease: QUART_OUT, startDelay: 0.5, onComplete: function() {
			spell.doPartialDamage(target, 1);
			moveBack(source, actionDone);
		}});
	}});
};

var marked = createSpell();
marked.name = "Marked";
marked.info = "Mark an enemy to take more damage";
marked.baseDamage = 0;
marked.cost = 30;
marked.affinities = ["Raunch"];
marked.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Marked", target);
			moveBack(source, actionDone);
		});
	});
};

var heal = createSpell();
heal.name = "Heal";
heal.info = "Heal an ally";
heal.baseDamage = 0;
heal.cost = 50;
heal.targetsEnemies = false;
heal.targetsAllies = true;
heal.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			doDamage(target, -500);
			moveBack(source, actionDone);
		});
	});
};

var rejuvenate = createSpell();
rejuvenate.name = "Rejuvenate";
rejuvenate.info = "Heal an ally over multiple turns";
rejuvenate.baseDamage = 0;
rejuvenate.cost = 200;
rejuvenate.targetsEnemies = false;
rejuvenate.targetsAllies = true;
rejuvenate.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Rejuvenating", target);
			moveBack(source, actionDone);
		});
	});
};

var poison = createSpell();
poison.name = "Poison";
poison.info = "Hits an enemy twice, then poisons them";
poison.baseDamage = 100;
poison.cost = 30;
poison.execute = function(source, target) {
	var spell = this;
	stepTowards(source, target, function() {
		var targetSpr = target.sprite;

		var strikes = 2;
		var strikesArr = [];
		for (var i = 0; i < strikes; i++) strikesArr.push(i);
		strikesArr.forEach(function(i) {

			timer(i * 0.75, function() {
				var spr = addRectImage(32, 32, 0xAAAA00);
				spr.x = targetSpr.x + targetSpr.width/2 - spr.width/2 + rndFloat(-50, 50);
				spr.y = targetSpr.y + targetSpr.height/2 - spr.height/2 + rndFloat(-50, 50);
				spell.doPartialDamage(target, 1/strikes);
				tween(spr, 1, {y: spr.y - rndFloat(20, 60), alpha: 0}, {onComplete: function() {
					spr.destroy();
					if (i == strikesArr.length-1) {
						moveBack(source, actionDone);
						applyBuff("Poisoned", target);
					}
				}});
			});
		});
	});
};

var barrier = createSpell();
barrier.name = "Barrier";
barrier.info = "Buffs and ally for the next hit";
barrier.baseDamage = 0;
barrier.targetsAllies = true;
barrier.targetsEnemies = false;
barrier.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Shielded", target);
			moveBack(source, actionDone);
		});
	});
};

var openMind = createSpell();
openMind.name = "Open Mind";
openMind.cost = 80;
openMind.info = "Gives an ally a high chance to counter attacks";
openMind.baseDamage = 0;
openMind.targetsEnemies = false;
openMind.targetsAllies = true;
openMind.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Aware", target);
			moveBack(source, actionDone);
		});
	});
};

var magicSpear = createSpell();
magicSpear.name = "Magic Spear";
magicSpear.info = "The spell that \"Awear\" casts";
magicSpear.baseDamage = 300;
magicSpear.execute = function(source, target) {
	stepTowards(source, target, function() {
		var sourceSpr = source.sprite;
		var targetSpr = target.sprite;
		var targetCenterX = targetSpr.x + targetSpr.width/2;
		var targetCenterY = targetSpr.y + targetSpr.height/2;

		var shine = addRectImage(128, 128, 0xCCCCCC);
		shine.centerPivot = true;
		shine.alpha = 0.5;
		shine.x = sourceSpr.x + sourceSpr.width/2 - shine.width/2;
		shine.y = sourceSpr.y + sourceSpr.height/2 - shine.height/2;
		shine.x = lerp(0.2, shine.x, targetCenterX);
		shine.y = lerp(0.2, shine.y, targetCenterY);

		var shot = addRectImage(32, 32, 0xFFFFFF);
		shot.centerPivot = true;
		shot.x = shine.x + shine.width/2 - shot.width/2;
		shot.y = shine.y + shine.height/2 - shot.height/2;

		tween(shot, 2, {rotation: 360}, {type: LOOPING});
		tween(shine, 2, {rotation: 360}, {type: LOOPING});

		timer(0.5, function() {
			moveBack(source);
		});

		tween(shot, 0.2, {x: targetCenterX - shot.width/2, y: targetCenterY - shot.height/2}, {startDelay: 1, onComplete: function() {
			shot.destroy();
			actionDone();
		}});

		timer(2, function() {
			tween(shine, 1, {alpha: 0, scaleX: 0.5, scaleY: 0.5}, {onComplete: function() {
				shine.destroy();
			}});
		});
	});
};

var healthPotion = createSpell();
healthPotion.name = "Health Potion";
healthPotion.info = "Heal an ally";
healthPotion.baseDamage = 0;
healthPotion.targetsEnemies = false;
healthPotion.targetsAllies = true;
healthPotion.execute = function(source, target) {
	moveUpTo(source, target, function() {
		var vial = addRectImage(16, 32, 0x700000);
		vial.centerPivot = true;
		centerSpriteOnSprite(source.sprite, vial);

		var targetSpr = target.sprite;
		tween(vial, 1.5, {rotation: 360}, {type: LOOPING});
		tween(vial, 0.5, {y: vial.y - 40}, {type: PINGPONG_ONCE});
		tween(vial, 1, {x: targetSpr.x + targetSpr.width/2 - vial.width/2}, {onComplete: function() {
			vial.destroy();
			actionDone();

			var splash = addRectImage(32, 32, 0xBB0000);
			centerSpriteOnSprite(targetSpr, splash);
			tween(splash, 1, {alpha: 0, scaleX: 1.3, scaleY: 1.3}, {onComplete: function() {
				splash.destroy();
			}});
		}});

		timer(1, function() {
			doDamage(target, -700);
			moveBack(source, actionDone);
		});

	});
};

var dream = createSpell();
dream.name = "Dream";
dream.info = "Think about why you're here right now";
dream.baseDamage = 0;
dream.cost = 50;
dream.targetsNone = true;
dream.execute = function(source, target) {
	msg("You can feel the empty space in your inventory get smaller and smaller!");
	timer(2, actionDone);
	giveItem("Last Dream", source);
};

var lastDream = createSpell();
lastDream.name = "Last Dream";
lastDream.info = "The goal of \"Determination.\"\nGives 500mp.";
lastDream.baseDamage = 0;
lastDream.targetsEnemies = false;
lastDream.targetsAllies = true;
lastDream.execute = function(source, target) {
	moveUpTo(source, target, function() {
		target.mp += 500;
		moveBack(source, actionDone);
	});
};

var giveSoul = createSpell();
giveSoul.name = "Give Soul";
giveSoul.info = "Give your health to your ally";
giveSoul.baseDamage = 0;
giveSoul.cost = 50;
giveSoul.targetsNone = true;
giveSoul.execute = function(source, target) {
	var drops = [];
	var ally = getMyAllies(source, true, true)[0];
	forRange(0, 50, function(i) {
		var drop = addRectImage(16, 16, 0xBB0000);
		centerSpriteOnSprite(source.sprite, drop);
		drop.x += rndFloat(-20, 20);
		drop.y += rndFloat(-20, 20);
		drop.alpha = 0;

		tween(drop, 1, {alpha: 1}, {startDelay: rndFloat(0, 1), onComplete: function() {
			var allySpr = ally.sprite;
			tween(drop, 0.5, {x: allySpr.x + allySpr.width/2, y: allySpr.y + allySpr.height/2}, {onComplete: function() {
				drop.destroy();
			}});
		}});
	});

	timer(2, function() {
		reviveUnit(ally);
		ally.hp += source.hp-1;
		source.hp = 1;
		moveBack(source, actionDone);
	});
};


///{ Enemy Spells
var shieldSpell = createSpell();
shieldSpell.name = "Shield";
shieldSpell.info = "Gives an ally a small shield";
shieldSpell.baseDamage = 0;
shieldSpell.cost = 20;
shieldSpell.targetsEnemies = false;
shieldSpell.targetsAllies = true;
shieldSpell.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Light Shield", target);
			moveBack(source, actionDone);
		});
	});
};

var slam = createSpell();
slam.name = "Slam";
slam.info = "Makes an enemy lose their next turn";
slam.baseDamage = 0;
slam.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(0.2, function() {
			applyBuff("Slammed", target);
			moveBack(source, actionDone);
		});
	});
};

var pushSpell = createSpell();
pushSpell.name = "Push";
pushSpell.info = "Gives enemies a chance to lose their next turn";
pushSpell.baseDamage = 0;
pushSpell.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(0.2, function() {
			applyBuff("Pushed", target);
			moveBack(source, actionDone);
		});
	});
};

var hardSlam = createSpell();
hardSlam.name = "Hard Slam";
hardSlam.info = "Stuns people hard";
hardSlam.baseDamage = 333;
hardSlam.cost = 100;
hardSlam.execute = function(source, target) {
	var spell = this;
	moveUpTo(source, target, function() {
		timer(0.2, function() {
			spell.doPartialDamage(target, 1);
			applyBuff("Slammed", target);
			moveBack(source, actionDone);
		});
	});
};

var quillSpray = createSpell();
quillSpray.name = "Quill Spray";
quillSpray.info = "none";
quillSpray.cost = 20;
quillSpray.execute = function(source, target) {
	stepTowards(source, target, function() {
		var quills = addRectImage(32, 32, 0x351900);
		quills.centerPivot = true;
		centerSpriteOnSprite(source.sprite, quills);
		tween(quills, 0.5, {scaleX: 50, scaleY: 50, alpha: 0}, {onComplete: function() {
			quills.destroy();
			getMyOpponents(source).forEach(function(opp) {
				doDamage(opp, 250);
			});
			moveBack(source, actionDone);
		}});
	});
};

var lilNibble = createSpell();
lilNibble.name = "Lil Nibble";
lilNibble.info = "none";
lilNibble.baseDamage = 200;
lilNibble.cost = 20;
lilNibble.execute = function(source, target) {
	var spell = this;
	moveUpTo(source, target, function() {
		spell.doPartialDamage(target, 1);
		moveBack(source, actionDone);
	});
};

var kickSand = createSpell();
kickSand.name = "Kick Sand";
kickSand.info = "none";
kickSand.baseDamage = 100;
kickSand.cost = 20;
kickSand.execute = function(source, target) {
	var spell = this;
	moveUpTo(source, target, function() {
		applyBuff("Blind", target);
		spell.doPartialDamage(target, 1);
		moveBack(source, actionDone);
	});
};

var explode = createSpell();
explode.name = "Explode";
explode.info = "none";
explode.cost = 20;
explode.execute = function(source, target) {
	var spell = this;
	stepTowards(source, target, function() {
		var explosion = addRectImage(32, 32, 0xFFFFFF);
		explosion.centerPivot = true;
		centerSpriteOnSprite(source.sprite, explosion);
		tween(explosion, 5, {scaleX: 50, scaleY: 50, alpha: 0}, {onComplete: function() {
			explosion.destroy();
			getMyOpponents(source).forEach(function(opp) {
				doDamage(opp, 999);
			});
			moveBack(source, actionDone);
		}});
	});
};

var smoke = createSpell();
smoke.name = "Smoke";
smoke.info = "none";
smoke.cost = 40;
smoke.execute = function(source, target) {
	var spell = this;
	stepTowards(source, target, function() {
		var smoke = addRectImage(32, 32, 0xAAAAAA);
		smoke.centerPivot = true;
		centerSpriteOnSprite(source.sprite, smoke);
		tween(smoke, 0.5, {scaleX: 50, scaleY: 50, alpha: 0, rotation: 360}, {onComplete: function() {
			smoke.destroy();
			getMyOpponents(source).forEach(function(opp) {
				if (rnd() > 0.15) {
					doDamage(opp, 100);
				} else {
					doDamage(opp, 1);
				}
			});
			moveBack(source, actionDone);
		}});
	});
};

var fuseSpark = createSpell();
fuseSpark.name = "Fuse Spark";
fuseSpark.info = "none";
fuseSpark.cost = 10;
fuseSpark.execute = function(source, target) {
	var spell = this;
	stepTowards(source, target, function() {
		var explosion = addRectImage(32, 32, 0x550000);
		explosion.centerPivot = true;
		centerSpriteOnSprite(source.sprite, explosion);
		tween(explosion, 0.5, {scaleX: 50, scaleY: 50, alpha: 0}, {onComplete: function() {
			explosion.destroy();
			getMyOpponents(source).forEach(function(opp) {
				doDamage(opp, 20);
			});
			applyBuff("Burn", source);
			moveBack(source, actionDone);
		}});
	});
};

var poke = createSpell();
poke.name = "Poke";
poke.info = "none";
poke.baseDamage = 1;
poke.cost = 0;
poke.execute = function(source, target) {
	var spell = this;
	moveUpTo(source, target, function() {
		spell.doPartialDamage(target, 1);
		moveBack(source, actionDone);
	});
};

var waitForEnd = createSpell();
waitForEnd.name = "Wait for End";
waitForEnd.info = "none";
waitForEnd.baseDamage = 0;
waitForEnd.cost = 0;
waitForEnd.execute = function(source, target) {
	var spell = this;

	stepTowards(source, target, function() {
		var square = addRectImage(128, 128, 0xFFFFFF);
		centerSpriteOnSprite(source.sprite, square);
		square.scaleY = 0;
		tween(square, 1, {alpha: 0, scaleY: 1}, {onComplete: function() {
			square.destroy();
			applyBuff("Awaiting End", source);
			moveBack(source, actionDone);
		}});
	});
};

var finalPunch = createSpell();
finalPunch.name = "Final Punch";
finalPunch.info = "none";
finalPunch.baseDamage = 30;
finalPunch.cost = 0;
finalPunch.execute = function(source, target) {
	var spell = this;
	moveUpTo(source, target, function() {
		spell.doPartialDamage(target, 1);
		moveBack(source, function() {
			var square = addRectImage(16, 16, 0xFFFFFF);
			square.alpha = 0;
			square.centerPivot = true;
			centerSpriteOnSprite(source.sprite, square);
			tween(square, 0.25, {alpha: 1, scaleX: 30, scaleY: 30}, {type: PINGPONG_ONCE, onComplete: function() {
				square.destroy();
				doDamage(source, source.maxHp);
				actionDone();
			}});
		});
	});
};

///}


///{ Buffs
var markedBuff = createBuff();
markedBuff.name = "Marked";
markedBuff.iconName = "Snuff.png";
markedBuff.info = "Will take double damage from the next attack";
markedBuff.executeDamaged = function(unit, damage, spell) {
	removeBuff("Marked", unit);
	return damage*2;
}

var shielded = createBuff();
shielded.name = "Shielded";
shielded.iconName = "Love.png";
shielded.info = "Will take half damage from the next attack";
shielded.executeDamaged = function(unit, damage, spell) {
	removeBuff("Shielded", unit);
	return damage*0.5;
}

var poisoned = createBuff();
poisoned.name = "Poisoned";
poisoned.iconName = "Blood.png";
poisoned.info = "Will take damage at the start of their turn";
poisoned.lastingTurns = 2;
poisoned.executeStartOfTrun = function(unit) {
	doDamage(unit, 150);
	actionDone();
}

var pushed = createBuff();
pushed.name = "Pushed";
pushed.iconName = "Abuse.png";
pushed.info = "Could lose their next turn";
pushed.lastingTurns = 999;
pushed.executeStartOfTrun = function(unit) {
	removeBuff("Pushed", unit);

	if (rnd() > 0.5) {
		unit.skipsNextTurn = true;
	}

	actionDone();
}

var slammed = createBuff();
slammed.name = "Slammed";
slammed.iconName = "Gore.png";
slammed.info = "Will lose their next trun";
slammed.lastingTurns = 999;
slammed.executeStartOfTrun = function(unit) {
	removeBuff("Slammed", unit);
	unit.skipsNextTurn = true;
	actionDone();
}

var aware = createBuff();
aware.name = "Aware";
aware.iconName = "Drugs.png";
aware.info = "Has a high chance to counter";
aware.lastingTurns = 3;
aware.executeAttacked = function(unit, spell) {
	if (rnd() > 0.5) castSpell("Magic Spear", unit, spell.source);
}

var lightShield = createBuff();
lightShield.name = "Light Shield";
lightShield.iconName = "Art.png";
lightShield.info = "Takes 10% less damage";
lightShield.lastingTurns = 3;
lightShield.executeDamaged = function(unit, damage, spell) {
	return damage*0.90;
}

var rejuvenating = createBuff();
rejuvenating.name = "Rejuvenating";
rejuvenating.iconName = "Drugs.png";
rejuvenating.info = "Healing...";
rejuvenating.lastingTurns = 5;
rejuvenating.executeStartOfTrun = function(unit) {
	doDamage(unit, -200);
	actionDone();
}

var bristleback = createBuff();
bristleback.name = "Bristleback";
bristleback.iconName = "Snuff.png";
bristleback.info = "Does a lot of damage when attacked";
bristleback.lastingTurns = 999;
bristleback.executeDamaged = function(unit, damage, spell) {
	var quills = addRectImage(32, 32, 0x351900);
	quills.centerPivot = true;
	centerSpriteOnSprite(unit.sprite, quills);
	tween(quills, 0.5, {scaleX: 50, scaleY: 50, alpha: 0}, {onComplete: function() {
		quills.destroy();
		getMyOpponents(unit).forEach(function(opp) {
			doDamage(opp, 200);
		});
	}});
	return damage;
}

var blind = createBuff();
blind.name = "Blind";
blind.iconName = "Trash.png";
blind.info = "Has a 50% chance of missing";
blind.lastingTurns = 2;
blind.executeAttacking = function(unit, damage, spell) {
	if (rnd() > 0.5) return 0;

	return damage;
}

var spawning = createBuff();
spawning.name = "Spawning";
spawning.iconName = "Abuse.png";
spawning.info = "Will spawn a unit";
spawning.lastingTurns = 999;
spawning.executeStartOfTrun = function(unit) {
	var newEnemy = createUnit();
	newEnemy.name = "Weak Porcupine";
	newEnemy.hp = newEnemy.maxHp = 1000;
	newEnemy.ai = "Porcupine";
	newEnemy.speed = 10;
	newEnemy.friendly = false;
	addUnit(newEnemy);

	actionDone();
}

var burn = createBuff();
burn.name = "Burn";
burn.iconName = "Blood.png";
burn.info = "Lose 10% hp each turn";
burn.lastingTurns = 3;
burn.executeStartOfTrun = function(unit) {
	doDamage(unit, unit.maxHp*0.1);
	actionDone();
}

var suffering = createBuff();
suffering.name = "Suffering";
suffering.iconName = "Hyper.png";
suffering.info = "Takes 10x damage";
suffering.lastingTurns = 2;
suffering.executeDamaged = function(unit, damage, spell) {
	return damage*10;
}

var awaitingEnd = createBuff();
awaitingEnd.name = "Awaiting End";
awaitingEnd.iconName = "Hard-Vore.png";
awaitingEnd.info = "Preparing to end it";
awaitingEnd.lastingTurns = 999;
///}


/// Ais
var skipperAi = createAi();
skipperAi.name = "Skipper";
skipperAi.execute = function(unit) {
	actionDone();
};

var simpleAi = createAi();
simpleAi.name = "Simple";
simpleAi.execute = function(unit) {
	castSpell("Gut Punch", unit, getMyRandomOpponent(unit));
	actionDone();
};

var stunnerAi = createAi()
stunnerAi.name = "Stunner";
stunnerAi.execute = function(unit) {
	var chosenTarget = null;
	getMyOpponents(unit).forEach(function(opp) {
		if (!hasBuff("Pushed", opp)) chosenTarget = opp;
	});

	if (chosenTarget) {
		castSpell("Push", unit, chosenTarget);
	} else {
		castSpell("Poison", unit, getMyRandomOpponent(unit));
	}
	actionDone();
};

var hardStunnerAi = createAi()
hardStunnerAi.name = "Hard Stunner";
hardStunnerAi.execute = function(unit) {
	castSpell("Hard Slam", unit, getMyRandomOpponent(unit));
	actionDone();
};

var shielderAi = createAi()
shielderAi.name = "Shielder";
shielderAi.execute = function(unit) {
	var toShield = null;
	getMyAllies(unit).forEach(function(enemy) {
		if (!hasBuff("Light Shield", enemy)) toShield = enemy;
	});

	if (toShield) {
		castSpell("Shield", unit, toShield);
	} else {
		castSpell("Shield", unit, getMyRandomAlly(unit));
	}
	actionDone();
};

var porcupine = createAi()
porcupine.name = "Porcupine";
porcupine.executeSpawned = function(unit) {
	applyBuff("Bristleback", unit);
}
porcupine.execute = function(unit) {
	var bothLow = true;
	var highPlayer = null;
	getMyOpponents(unit).forEach(function(opp) {
		if (!highPlayer || opp.hp > highPlayer.hp) highPlayer = opp;
		if (opp.hp / opp.maxHp > 0.5) bothLow = false;
	});

	if (bothLow) {
		castSpell("Quill Spray", unit, getMyOpponents(unit)[0]);
	} else if (highPlayer) {
		castSpell("Lil Nibble", unit, highPlayer);
	} else {
		castSpell("Lil Nibble", unit, getMyRandomOpponent(unit));
	}
	actionDone();
};

var spawner = createAi()
spawner.name = "Spawner";
spawner.execute = function(unit) {
	if (hasBuff("Marked", unit)) {
		var spr = addRectImage(256, 256, 0xFFFF00);
		centerSpriteOnSprite(unit.sprite, spr);
		spr.alpha = 0.5;
		spr.centerPivot = true; 
		tween(spr, 3, {alpha: 0, rotation: 360, scaleX: 0, scaleY: 0}, {onComplete: function() {
			spr.destroy();
		}});
		removeBuff("Marked", unit);
		timer(2, actionDone);
		return;
	}

	if (unit.hp / unit.maxHp < 0.75 && !hasBuff("Spawning", unit)) {
		applyBuff("Spawning", unit);
	} else {
		var unitToBlind = null;
		getMyOpponents(unit).forEach(function(unit) {
			if (!hasBuff("Blind", unit)) unitToBlind = unit;
		});
		if (unitToBlind) {
			castSpell("Kick Sand", unit, unitToBlind);
		} else {
			castSpell("Poison", unit, getMyRandomOpponent(unit));
		}
	}
	actionDone();
};

var exploder = createAi()
exploder.name = "Exploder";
exploder.execute = function(unit) {
	var hpPerc = unit.hp / unit.maxHp;
	if (hpPerc < 0.3) {
		castSpell("Explode", unit, getMyOpponents(unit)[0]);
	} else if (!hasBuff("Burn", unit)) {
		castSpell("Fuse Spark", unit, unit);
	} else {
		castSpell("Smoke", unit, getMyOpponents(unit)[0]);
	}
	actionDone();
};

var immortal = createAi()
immortal.name = "Immortal";
immortal.execute = function(unit) {
	var unitToSuffer = null;

	getMyOpponents(unit).forEach(function(opp) {
		if (!hasBuff("Suffering", opp)) unitToSuffer = opp;
	});

	if (unitToSuffer) {
		stepTowards(unit, unitToSuffer, function() {
			var square = addRectImage(128, 128, 0xFFFFFF);
			centerSpriteOnSprite(unitToSuffer.sprite, square);
			square.scaleY = 0;
			tween(square, 1, {alpha: 0, scaleY: 1}, {onComplete: function() {
				square.destroy();
				applyBuff("Suffering", unitToSuffer);
				moveBack(unit, actionDone);
			}});
		});
	} else {
		castSpell("Poke", unit, getMyRandomOpponent(unit));
		actionDone();
	}
};
immortal.executeDead = function(unit) {
	forRange(0, 2, function(i) {
		var newEnemy = createUnit();
		newEnemy.name = "Ender";
		newEnemy.hp = newEnemy.maxHp = 1000;
		newEnemy.ai = "Ender";
		newEnemy.speed = 10;
		newEnemy.friendly = false;
		addUnit(newEnemy);
	});
}

var ender = createAi()
ender.name = "Ender";
ender.execute = function(unit) {
	if (hasBuff("Awaiting End", unit)) {
		castSpell("Final Punch", unit, getMyRandomOpponent(unit));
	} else {
		castSpell("Wait for End", unit, getMyRandomOpponent(unit));
	}

	actionDone();
};


/// Units
var players = [];
var p1 = createUnit();
p1.speed = 30;
p1.name = "Player 1";
p1.spellNames = [
	"Gut Punch",
	"Fireball",
	"Marked",
	"Barrier",
	"Give Soul"
];
p1.itemNames = [
	"Health Potion",
	"Health Potion"
];
p1.affinities = ["Fire"];
players.push(p1);

var p2 = createUnit();
p2.speed = 30;
p2.name = "Player 2";
p2.spellNames = [
	"Gut Punch",
	"Lightning",
	"Poison",
	"Heal",
	"Rejuvenate",
	"Open Mind",
	"Dream"
];
p2.itemNames = [
];
p2.affinities = ["Electric"];
players.push(p2);

var enemies = [];

if (data.testRpgSetting == "noAi") {
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.hp = enemy1.maxHp = 5000;
	enemy1.ai = "Skipper";
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.hp = enemy2.maxHp = 5000;
	enemy2.ai = "Skipper";
	enemy2.speed = 15;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.hp = enemy3.maxHp = 5000;
	enemy3.ai = "Skipper";
	enemy3.speed = 20;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "simpleAi") {
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.hp = enemy1.maxHp = 5000;
	enemy1.ai = "Simple";
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.hp = enemy2.maxHp = 5000;
	enemy2.ai = "Simple";
	enemy2.speed = 15;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.hp = enemy3.maxHp = 5000;
	enemy3.ai = "Simple";
	enemy3.speed = 20;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "hardAi") {
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.hp = enemy1.maxHp = 5000;
	enemy1.ai = "Stunner";
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.hp = enemy2.maxHp = 5000;
	enemy2.ai = "Stunner";
	enemy2.speed = 15;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.hp = enemy3.maxHp = 5000;
	enemy3.ai = "Stunner";
	enemy3.speed = 20;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "rpgShields") {
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Shielder";
	enemy1.hp = enemy1.maxHp = 3000;
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Shielder";
	enemy2.hp = enemy2.maxHp = 3000;
	enemy2.speed = 15;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.ai = "Hard Stunner";
	enemy3.hp = enemy3.maxHp = 7000;
	enemy3.speed = 20;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "rpgPorcupines") {
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Porcupine";
	enemy1.hp = enemy1.maxHp = 5000;
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Porcupine";
	enemy2.hp = enemy2.maxHp = 5000;
	enemy2.speed = 10;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.ai = "Porcupine";
	enemy3.hp = enemy3.maxHp = 5000;
	enemy3.speed = 10;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "rpgSpawners") {
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Spawner";
	enemy1.hp = enemy1.maxHp = 5000;
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Spawner";
	enemy2.hp = enemy2.maxHp = 5000;
	enemy2.speed = 10;
	enemies.push(enemy2);
}

if (data.testRpgSetting == "rpgExploders") {
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Exploder";
	enemy1.hp = enemy1.maxHp = 3000;
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Exploder";
	enemy2.hp = enemy2.maxHp = 3000;
	enemy2.speed = 10;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.ai = "Exploder";
	enemy3.hp = enemy3.maxHp = 3000;
	enemy3.speed = 10;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "rpgImmortals") {
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Immortal";
	enemy1.hp = enemy1.maxHp = 3000;
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Immortal";
	enemy2.hp = enemy2.maxHp = 3000;
	enemy2.speed = 10;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.ai = "Immortal";
	enemy3.hp = enemy3.maxHp = 1;
	enemy3.speed = 10;
	enemies.push(enemy3);
}

startRpgBattle(players, enemies, function() {
	gotoPassage("rpgTest");
});
