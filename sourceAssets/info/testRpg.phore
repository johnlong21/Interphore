execAsset("rpg.phore");

initRpgBattle();

function centerSpriteOnSprite(stays, moves) {
	moves.x = stays.x + stays.width/2 - moves.width/2;
	moves.y = stays.y + stays.height/2 - moves.height/2;
}

function stepTowards(source, target, onComplete, dur) {
	if (dur == undefined) dur = 0.2;
	var sourceSpr = source.sprite;
	var targetSpr = target.sprite;

	tween(sourceSpr, dur, {x: lerp(0.2, sourceSpr.x, targetSpr.x), y: lerp(0.2, sourceSpr.y, targetSpr.y)}, {onComplete: onComplete});
}

function moveUpTo(source, target, onComplete, dur) {
	if (dur == undefined) dur = 0.5;
	var sourceSpr = source.sprite;
	var targetSpr = target.sprite;

	var endX = gameWidth/2 - sourceSpr.width/2;
	var endY = gameHeight/2 - sourceSpr.height/2;
	endX = lerp(0.85, endX, targetSpr.x);
	endY = lerp(1, endY, targetSpr.y);

	tween(sourceSpr, dur, {x: endX, y: endY}, {onComplete: onComplete});
}

function moveBack(source, onComplete, dur) {
	if (dur == undefined) dur = 0.4;
	var sourceSpr = source.sprite;

	tween(sourceSpr, dur, {x: source.originX, y: source.originY}, {onComplete: onComplete});
}

function moveUnitInFrontOf(source, dest) {
	var sourceSpr = source.sprite;
	var destSpr = dest.sprite;

	sourceSpr.x = gameWidth/2 - sourceSpr.width/2;
	sourceSpr.y = gameHeight/2 - sourceSpr.height/2;

	sourceSpr.x = lerp(0.85, sourceSpr.x, destSpr.x);
	sourceSpr.y = lerp(1, sourceSpr.y, destSpr.y);
}

/// Spells
var fireball = createSpell();
fireball.name = "Fireball";
fireball.info = "Throws a fireball";
fireball.baseDamage = 20;
fireball.affinities = ["Fire"];
fireball.execute = function(source, target) {
	stepTowards(source, target, function() {
		var targetSpr = target.sprite;
		var spr = addRectImage(64, 64, 0xCC0000);
		spr.x = targetSpr.x + targetSpr.width/2 - spr.width/2;
		spr.y = targetSpr.y + targetSpr.height/2 - spr.height/2;
		tween(spr, 1, {scaleX: 3, scaleY: 3, alpha: 0}, {onComplete: function() {
			spr.destroy();
			fireball.doPartialDamage(target, 1);
			moveBack(source, actionDone);
		}});
	});
};

var lightning = createSpell();
lightning.name = "Lightning";
lightning.info = "Hit an enemy with many lightning bolts";
lightning.affinities = ["Electric"];
lightning.execute = function(source, target) {

	stepTowards(source, target, function() {
		var targetSpr = target.sprite;
		var strikes = 10;
		var strikesArr = [];
		for (var i = 0; i < strikes; i++) strikesArr.push(i);
		strikesArr.forEach(function(i) {

			timer(i * 0.2, function() {
				var spr = addRectImage(32, gameHeight, 0xFFFF00);
				spr.x = targetSpr.x + targetSpr.width/2 - spr.width/2 + rndFloat(-50, 50);
				spr.y = 0;
				lightning.doPartialDamage(target, 1/(strikes));
				tween(spr, 0.5, {alpha: 0}, {onComplete: function() {
					spr.destroy();
					if (i == strikesArr.length-1) moveBack(source, actionDone);
				}});
			});
		});
	});
};

var gutPunch = createSpell();
gutPunch.name = "Gut Punch";
gutPunch.info = "A strong generic attack";
gutPunch.baseDamage = 15;
gutPunch.isAttack = true;
gutPunch.execute = function(source, target) {
	var sourceSpr = source.sprite;
	var targetSpr = target.sprite;

	var endX = lerp(0.65, sourceSpr.x, targetSpr.x);
	var endY = lerp(0.90, sourceSpr.y, targetSpr.y);

	tween(sourceSpr, 1, {x: endX, y: endY}, {onComplete: function() {
		tween(sourceSpr, 0.5, {x: targetSpr.x}, {ease: QUART_OUT, startDelay: 0.5, onComplete: function() {
			gutPunch.doPartialDamage(target, 1);
			moveBack(source, actionDone);
		}});
	}});
};

var marked = createSpell();
marked.name = "Marked";
marked.info = "Mark an enemy to take more damage";
marked.baseDamage = 0;
marked.affinities = ["Raunch"];
marked.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Marked", target);
			moveBack(source, actionDone);
		});
	});
};

var heal = createSpell();
heal.name = "Heal";
heal.info = "Heal an ally";
heal.baseDamage = 0;
heal.targetsEnemies = false;
heal.targetsAllies = true;
heal.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			doDamage(target, -10);
			moveBack(source, actionDone);
		});
	});
};

var poison = createSpell();
poison.name = "Poison";
poison.info = "Hits an enemy twice, then poisons them";
poison.baseDamage = 6;
poison.execute = function(source, target) {
	stepTowards(source, target, function() {
		var targetSpr = target.sprite;

		var strikes = 2;
		var strikesArr = [];
		for (var i = 0; i < strikes; i++) strikesArr.push(i);
		strikesArr.forEach(function(i) {

			timer(i * 0.75, function() {
				var spr = addRectImage(32, 32, 0xAAAA00);
				spr.x = targetSpr.x + targetSpr.width/2 - spr.width/2 + rndFloat(-50, 50);
				spr.y = targetSpr.y + targetSpr.height/2 - spr.height/2 + rndFloat(-50, 50);
				poison.doPartialDamage(target, 1/strikes);
				tween(spr, 1, {y: spr.y - rndFloat(20, 60), alpha: 0}, {onComplete: function() {
					spr.destroy();
					if (i == strikesArr.length-1) {
						moveBack(source, actionDone);
						applyBuff("Poisoned", target);
					}
				}});
			});
		});
	});
};

var barrier = createSpell();
barrier.name = "Barrier";
barrier.info = "Buffs and ally for the next hit";
barrier.baseDamage = 0;
barrier.targetsAllies = true;
barrier.targetsEnemies = false;
barrier.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Shielded", target);
			moveBack(source, actionDone);
		});
	});
};

var slam = createSpell();
slam.name = "Slam";
slam.info = "Makes an enemy lose their next turn";
slam.baseDamage = 0;
slam.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(0.2, function() {
			applyBuff("Slammed", target);
			moveBack(source, actionDone);
		});
	});
};

var pushSpell = createSpell();
pushSpell.name = "Push";
pushSpell.info = "Gives enemies a chance to lose their next turn";
pushSpell.baseDamage = 0;
pushSpell.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(0.2, function() {
			applyBuff("Pushed", target);
			moveBack(source, actionDone);
		});
	});
};

var openMind = createSpell();
openMind.name = "Open Mind";
openMind.info = "Gives an ally a high chance to counter attacks";
openMind.baseDamage = 0;
openMind.targetsEnemies = false;
openMind.targetsAllies = true;
openMind.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Aware", target);
			moveBack(source, actionDone);
		});
	});
};

var magicSpear = createSpell();
magicSpear.name = "Magic Spear";
magicSpear.info = "The spell that \"Awear\" casts";
magicSpear.baseDamage = 10;
magicSpear.execute = function(source, target) {
	stepTowards(source, target, function() {
		var sourceSpr = source.sprite;
		var targetSpr = target.sprite;
		var targetCenterX = targetSpr.x + targetSpr.width/2;
		var targetCenterY = targetSpr.y + targetSpr.height/2;

		var shine = addRectImage(128, 128, 0xCCCCCC);
		shine.centerPivot = true;
		shine.alpha = 0.5;
		shine.x = sourceSpr.x + sourceSpr.width/2 - shine.width/2;
		shine.y = sourceSpr.y + sourceSpr.height/2 - shine.height/2;
		shine.x = lerp(0.2, shine.x, targetCenterX);
		shine.y = lerp(0.2, shine.y, targetCenterY);

		var shot = addRectImage(32, 32, 0xFFFFFF);
		shot.centerPivot = true;
		shot.x = shine.x + shine.width/2 - shot.width/2;
		shot.y = shine.y + shine.height/2 - shot.height/2;

		tween(shot, 2, {rotation: 360}, {type: LOOPING});
		tween(shine, 2, {rotation: 360}, {type: LOOPING});

		timer(0.5, function() {
			moveBack(source);
		});

		tween(shot, 0.2, {x: targetCenterX - shot.width/2, y: targetCenterY - shot.height/2}, {startDelay: 1, onComplete: function() {
			shot.destroy();
			actionDone();
		}});

		timer(2, function() {
			tween(shine, 1, {alpha: 0, scaleX: 0.5, scaleY: 0.5}, {onComplete: function() {
				shine.destroy();
			}});
		});
	});
};

var healthPotion = createSpell();
healthPotion.name = "Health Potion";
healthPotion.info = "Heal an ally";
healthPotion.baseDamage = 0;
healthPotion.targetsEnemies = false;
healthPotion.targetsAllies = true;
healthPotion.execute = function(source, target) {
	moveUpTo(source, target, function() {
		var vial = addRectImage(16, 32, 0x700000);
		vial.centerPivot = true;
		centerSpriteOnSprite(source.sprite, vial);

		var targetSpr = target.sprite;
		tween(vial, 1.5, {rotation: 360}, {type: LOOPING});
		tween(vial, 0.5, {y: vial.y - 40}, {type: PINGPONG_ONCE});
		tween(vial, 1, {x: targetSpr.x + targetSpr.width/2 - vial.width/2}, {onComplete: function() {
			vial.destroy();
			actionDone();

			var splash = addRectImage(32, 32, 0xBB0000);
			centerSpriteOnSprite(targetSpr, splash);
			tween(splash, 1, {alpha: 0, scaleX: 1.3, scaleY: 1.3}, {onComplete: function() {
				splash.destroy();
			}});
		}});

		timer(1, function() {
			doDamage(target, -20);
			moveBack(source, actionDone);
		});

	});
};

var dream = createSpell();
dream.name = "Dream";
dream.info = "Think about why you're here right now";
dream.baseDamage = 0;
dream.targetsNone = true;
dream.execute = function(source, target) {
	msg("You can feel the empty space in your inventory get smaller and smaller!");
	timer(2, actionDone);
	giveItem("Last Dream", source);
};

var lastDream = createSpell();
lastDream.name = "Last Dream";
lastDream.info = "The goal of \"Determination.\"";
lastDream.baseDamage = 0;
lastDream.targetsEnemies = false;
lastDream.targetsAllies = true;
lastDream.execute = function(source, target) {
	moveUpTo(source, target, function() {
		doDamage(target, -30);
		moveBack(source, actionDone);
	});
};

var shieldSpell = createSpell();
shieldSpell.name = "Shield";
shieldSpell.info = "Gives an ally a small shield";
shieldSpell.baseDamage = 0;
shieldSpell.targetsEnemies = false;
shieldSpell.targetsAllies = true;
shieldSpell.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(1, function() {
			applyBuff("Light Shield", target);
			moveBack(source, actionDone);
		});
	});
};

var hardSlam = createSpell();
hardSlam.name = "Hard Slam";
hardSlam.info = "Stuns people hard";
hardSlam.baseDamage = 20;
hardSlam.execute = function(source, target) {
	moveUpTo(source, target, function() {
		timer(0.2, function() {
			hardSlam.doPartialDamage(target, 1);
			applyBuff("Slammed", target);
			moveBack(source, actionDone);
		});
	});
};

/// AIs
var skipperAi = createAi();
skipperAi.name = "Skipper";
skipperAi.execute = function(unit) {
	actionDone();
};

var simpleAi = createAi();
simpleAi.name = "Simple";
simpleAi.execute = function(unit) {
	castSpell("Gut Punch", unit, getRandomPlayer());
	actionDone();
};

var stunnerAi = createAi()
stunnerAi.name = "Stunner";
stunnerAi.execute = function(unit) {
	var chosenTarget = null;
	rpg.players.forEach(function(player) {
		if (!hasBuff("Pushed", player)) chosenTarget = player;
	});

	if (chosenTarget) {
		castSpell("Push", unit, chosenTarget);
	} else {
		castSpell("Poison", unit, getRandomPlayer());
	}
	actionDone();
};

var hardStunnerAi = createAi()
hardStunnerAi.name = "Hard Stunner";
hardStunnerAi.execute = function(unit) {
	castSpell("Hard Slam", unit, getRandomPlayer());
	actionDone();
};

var shielderAi = createAi()
shielderAi.name = "Shielder";
shielderAi.execute = function(unit) {
	var toShield = null;
	rpg.enemies.forEach(function(enemy) {
		if (!hasBuff("Light Shield", enemy)) toShield = enemy;
	});

	if (toShield) {
		castSpell("Shield", unit, toShield);
	} else {
		castSpell("Shield", unit, getRandomEnemy());
	}
	actionDone();
};

/// Buffs
var markedBuff = createBuff();
markedBuff.name = "Marked";
markedBuff.iconName = "Snuff.png";
markedBuff.info = "Will take double damage from the next attack";
markedBuff.executeDamaged = function(unit, damage, spell) {
	removeBuff("Marked", unit);
	return damage*2;
}

var shielded = createBuff();
shielded.name = "Shielded";
shielded.iconName = "Love.png";
shielded.info = "Will take half damage from the next attack";
shielded.executeDamaged = function(unit, damage, spell) {
	removeBuff("Shielded", unit);
	return damage*0.5;
}

var poisoned = createBuff();
poisoned.name = "Poisoned";
poisoned.iconName = "Blood.png";
poisoned.info = "Will take damage at the start of their turn";
poisoned.lastingTurns = 2;
poisoned.executeStartOfTrun = function(unit) {
	doDamage(unit, 5);
	actionDone();
}

var pushed = createBuff();
pushed.name = "Pushed";
pushed.iconName = "Abuse.png";
pushed.info = "Could lose their next turn";
pushed.lastingTurns = 999;
pushed.executeStartOfTrun = function(unit) {
	removeBuff("Pushed", unit);

	if (rnd() > 0.5) {
		unit.skipsNextTurn = true;
	}

	actionDone();
}

var slammed = createBuff();
slammed.name = "Slammed";
slammed.iconName = "Gore.png";
slammed.info = "Will lose their next trun";
slammed.lastingTurns = 999;
slammed.executeStartOfTrun = function(unit) {
	removeBuff("Slammed", unit);
	unit.skipsNextTurn = true;
	actionDone();
}

var aware = createBuff();
aware.name = "Aware";
aware.iconName = "Drugs.png";
aware.info = "Has a high chance to counter";
aware.lastingTurns = 3;
aware.executeAttacked = function(unit, spell) {
	if (rnd() > 0.5) castSpell("Magic Spear", unit, spell.source);
}

var lightShield = createBuff();
lightShield.name = "Light Shield";
lightShield.iconName = "Art.png";
lightShield.info = "Takes 10% less damage";
lightShield.lastingTurns = 3;
lightShield.executeDamaged = function(unit, damage, spell) {
	return damage*0.90;
}

/// Units
var players = [];
var p1 = createUnit();
p1.speed = 30;
p1.name = "Player 1";
p1.spellNames = [
	"Gut Punch",
	"Fireball",
	"Marked",
	"Barrier",
	"Slam"
];
p1.itemNames = [
	"Health Potion",
	"Health Potion"
];
p1.affinities = ["Fire"];
players.push(p1);

var p2 = createUnit();
p2.speed = 30;
p2.name = "Player 2";
p2.spellNames = [
	"Gut Punch",
	"Lightning",
	"Poison",
	"Heal",
	"Open Mind",
	"Dream"
];
p2.itemNames = [
];
p2.affinities = ["Electric"];
players.push(p2);

var enemies = [];
var enemy1 = createUnit();
enemy1.name = "enemy 1";
enemy1.ai = "Simple";
enemy1.speed = 10;
enemies.push(enemy1);

var enemy2 = createUnit();
enemy2.name = "enemy 2";
enemy2.ai = "Simple";
enemy2.speed = 15;
enemies.push(enemy2);

var enemy3 = createUnit();
enemy3.name = "enemy 3";
enemy3.ai = "Simple";
enemy3.speed = 20;
enemies.push(enemy3);

if (data.testRpgSetting == "noAi") {
	var enemies = [];
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Skipper";
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Skipper";
	enemy2.speed = 15;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.ai = "Skipper";
	enemy3.speed = 20;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "simpleAi") {
	var enemies = [];
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Simple";
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Simple";
	enemy2.speed = 15;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.ai = "Simple";
	enemy3.speed = 20;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "hardAi") {
	var enemies = [];
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Stunner";
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Stunner";
	enemy2.speed = 15;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.ai = "Stunner";
	enemy3.speed = 20;
	enemies.push(enemy3);
}

if (data.testRpgSetting == "rpgShields") {
	var enemies = [];
	var enemy1 = createUnit();
	enemy1.name = "enemy 1";
	enemy1.ai = "Shielder";
	enemy1.speed = 10;
	enemies.push(enemy1);

	var enemy2 = createUnit();
	enemy2.name = "enemy 2";
	enemy2.ai = "Shielder";
	enemy2.speed = 15;
	enemies.push(enemy2);

	var enemy3 = createUnit();
	enemy3.name = "enemy 3";
	enemy3.ai = "Hard Stunner";
	enemy3.speed = 20;
	enemies.push(enemy3);
}

startRpgBattle(players, enemies, function() {
	gotoPassage("rpgTest");
});
