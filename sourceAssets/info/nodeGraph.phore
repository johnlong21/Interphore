var preventNextCheckpoint = false;
var graphNodes = [];

var graphBg = null;
var graphLines = [];

function clearNodes() {
	graphNodes = [];
}

function submitNode(nodeName, result) {
	var node;
	node = {
		name: nodeName,
		result: result,
		connectedTo: null,
		connectedDir: 0,
		sprite: null,
		textField: null,
		locked: false,
		lockFunction: null
	};
	graphNodes.push(node);
}

function attachNode(prevName, nextName, dir) {
	var prevNode = null;
	var nextNode = null;

	for (var i = 0; i < graphNodes.length; i++)
		if (graphNodes[i].name == prevName)
			prevNode = graphNodes[i];

	for (var i = 0; i < graphNodes.length; i++)
		if (graphNodes[i].name == nextName)
			nextNode = graphNodes[i];

	nextNode.connectedTo = prevNode;
	nextNode.connectedDir = dir;
}

function setNodeLocked(nodeName, fn) {
	var node = null;

	for (var i = 0; i < graphNodes.length; i++)
		if (graphNodes[i].name == nodeName)
			node = graphNodes[i];

	node.lockFunction = fn;
}

function gotoMap() {
	if (preventNextCheckpoint) {
		data = JSON.parse(checkpointStr);
		preventNextCheckpoint = false;
	} else {
		msg("Autosaved", {silent: true});
		saveCheckpoint();
	}

	clear();
	exitButton.alpha = 0;

	graphLines = [];

	graphBg = addEmptyImage(2048, 2048);
	graphBg.x = gameWidth/2 - graphBg.width/2;
	graphBg.y = gameHeight/2 - graphBg.height/2;
	graphBg.draggable = true;

	graphNodes.forEach(function(node) {
		if (node.lockFunction) node.locked = !node.lockFunction();

		node.sprite = add9SliceImage("img/writer/nodeChoice", 180, 180, 22, 22, 44, 44);
		node.sprite.x = graphBg.width/2 - node.sprite.width/2;
		node.sprite.y = graphBg.height/2 - node.sprite.height/2;
		node.sprite.layer = GRAPH_NODE_LAYER;

		if (node.locked) {
				node.sprite.tint = 0xCC0d0d0d;
		} else {
			node.sprite.tint = 0;
			node.sprite.onHover = function() {
				playEffect("audio/ui/hoverChoiceIcons");
				node.sprite.scaleX = 1.1;
				node.sprite.scaleY = 1.1;
			};
			node.sprite.onUnHover = function() {
				node.sprite.scaleX = 1;
				node.sprite.scaleY = 1;
			};
			node.sprite.onRelease = function() {
				playEffect("audio/ui/bestChoiceClick");
				if (typeof node.result === "string") {
					gotoPassage(node.result);
				} else {
					node.result();
				}
			}
		}
		graphBg.addChild(node.sprite);

		node.textField = addEmptyImage(node.sprite.width, node.sprite.height);
		node.textField.setFont("NunitoSans-Light_22");
		node.textField.setText(node.name);
		node.textField.tint = 0xFFa5e3f2;
		node.textField.x = node.sprite.width/2 - node.textField.textWidth/2;
		node.textField.y = node.sprite.height/2 - node.textField.textHeight/2;
		node.textField.layer = GRAPH_NODE_LAYER;
		node.sprite.addChild(node.textField);
	});

	graphNodes.forEach(function(node) {
		var other = node.connectedTo;

		if (other) {
			var nodeSpr = node.sprite;
			var otherSpr = other.sprite;

			var nodePad = 300;
			if (node.connectedDir == TOP) {
				nodeSpr.x = otherSpr.x;
				nodeSpr.y = otherSpr.y - nodePad;
			} else if (node.connectedDir == BOTTOM) {
				nodeSpr.x = otherSpr.x;
				nodeSpr.y = otherSpr.y + nodePad;
			} else if (node.connectedDir == LEFT) {
				nodeSpr.x = otherSpr.x - nodePad;
				nodeSpr.y = otherSpr.y;
			} else if (node.connectedDir == RIGHT) {
				nodeSpr.x = otherSpr.x + nodePad;
				nodeSpr.y = otherSpr.y;
			}

			var x1 = nodeSpr.x + nodeSpr.width/2;
			var y1 = nodeSpr.y + nodeSpr.height/2;
			var x2 = otherSpr.x + otherSpr.width/2;
			var y2 = otherSpr.y + otherSpr.height/2;
			var dist = pointDistance(x1, y1, x2, y2);
			var line = addRectImage(dist, 4, 0x752b2b);
			graphBg.addChild(line);
			line.x = x1;
			line.y = y1;
			line.layer = GRAPH_LINE_LAYER;
			line.rotation = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
		}
	});

	var saveButton = addImage("writer/save.png");
	saveButton.scaleX = saveButton.scaleY = 2;
	saveButton.x = exitButton.x;
	saveButton.y = exitButton.y + exitButton.height*exitButton.scaleX + 16;
	saveButton.onRelease = saveGame;
	saveButton.whileHovering = function() {
		showTooltip("Save");
	}

	var loadButton = addImage("writer/load.png");
	loadButton.scaleX = loadButton.scaleY = 2;
	loadButton.x = saveButton.x;
	loadButton.y = saveButton.y + saveButton.height*saveButton.scaleX + 16;
	loadButton.onRelease = loadGame;
	loadButton.whileHovering = function() {
		showTooltip("Load");
	}

	var extrasButton = addImage("writer/extras.png");
	extrasButton.scaleX = extrasButton.scaleY = 2;
	extrasButton.x = loadButton.x;
	extrasButton.y = loadButton.y + loadButton.height*loadButton.scaleX + 16;
	extrasButton.onRelease = function() {
		gotoPassage("scratchModStart");
	}
	extrasButton.whileHovering = function() {
		showTooltip("Extras");
	}
}

function getNode(name) {
	var returnNode = null;
	graphNodes.forEach(function(node) {
		if (node.name == name) returnNode = node;
	});

	return returnNode;
}

{ //@incomplete Move these somewhere else
	submitNode("Scratch", function() {execAsset("scratch.phore");});
	submitNode("Indigo Pond", "piss");
	attachNode("Scratch", "Indigo Pond", TOP);

	submitNode("Alcohol Pipeline", "pipeline");
	attachNode("Indigo Pond", "Alcohol Pipeline", TOP);

	submitNode("Underground Farms", "rox");
	attachNode("Scratch", "Underground Farms", LEFT);

	submitNode("Heaven", "heaven");
	attachNode("Scratch", "Heaven", RIGHT);
	setNodeLocked("Heaven", function() {
		return data.apples > 3;
	});
}
