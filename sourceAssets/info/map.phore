//TODO(fallow): Do save fixups

data.mapEntries = [];

var worldMap = {
	nodes: [],
	lines: [],
	container: null,

	dragging: false,
	dragPointX: 0,
	dragPointY: 0,

	newlyUpdatedNodes: [],
	prevLocX: 0,
	prevLocY: 0,
	startMoveTime: 0,
	curPhase: 0,
	poofAnim: null,

	saveButton: null,
	loadButton: null,
	extrasButton: null,
};

worldMap.clear = function() {
	worldMap.nodes = [];
};

worldMap.getEntry = function(entryName) {
	var entry = data.mapEntries[entryName];

	if (!entry) {
		entry = {
			name: entryName,
			unlocked: false,
			seenUnlocked: false,
			started: false,
			completed: false,
			seenCompleted: false,
			checkmark: true
		};

		data.mapEntries[entryName] = entry;
	}

	return entry;
};

worldMap.unlockEntry = function(entryName) {
	var entry = worldMap.getEntry(entryName);
	entry.unlocked = true;
};

worldMap.preUnlockEntry = function(entryName) {
	var entry = worldMap.getEntry(entryName);
	entry.unlocked = true;
	entry.seenUnlocked = true;
	entry.checkmark = false;
};

worldMap.completeEntry = function(entryName) {
	var entry = worldMap.getEntry(entryName);
	entry.completed = true;
};

worldMap.createNode = function(entryName, dest, connectedDirection, connectedNodeName) {
	var entry = worldMap.getEntry(entryName);

	var node = {
		sprite: null,
		textField: null,
		progressIcon: null,
		dest: dest,

		entry: entry,
		connectedNodeName: connectedNodeName,
		connectedDirection: connectedDirection,
	};

	worldMap.nodes[entryName] = node;

	return entry;
};

worldMap.show = function() {
	if (preventNextCheckpoint) {
		data = JSON.parse(checkpointStr);
		preventNextCheckpoint = false;
	} else {
		msg("Autosaved", {silent: true});
		saveCheckpoint();
	}

	worldMap.container = addEmptyImage(1, 1);

	Object.keys(worldMap.nodes).forEach(function(nodeKey) {
		var node = worldMap.nodes[nodeKey];

		node.textField = addEmptyImage(256, 256);
		node.textField.setFont("NunitoSans-Light_22");
		node.textField.setText(node.entry.name);
		node.textField.tint = 0xFFa5e3f2;
		node.textField.layer = GRAPH_NODE_TEXT_LAYER;

		var textPadding = 60;
		node.sprite = add9SliceImage(
			"img/writer/nodeChoice",
			node.textField.textWidth + textPadding,
			node.textField.textHeight + textPadding,
			22, 22, 44, 44
		);
		node.sprite.layer = GRAPH_NODE_LAYER;
		node.sprite.centerPivot = true;
		worldMap.container.addChild(node.sprite);

		node.textField.x = node.sprite.width/2 - node.textField.textWidth/2;
		node.textField.y = node.sprite.height/2 - node.textField.textHeight/2;
		node.sprite.addChild(node.textField);

		if (!node.connectedNodeName) {
			node.sprite.x = gameWidth/2 - node.sprite.width/2;
			node.sprite.y = gameHeight/2 - node.sprite.height/2;
		} else {
			var parentNode = worldMap.nodes[node.connectedNodeName];
			node.sprite.x = parentNode.sprite.x + parentNode.sprite.width/2 - node.sprite.width/2;
			node.sprite.y = parentNode.sprite.y + parentNode.sprite.height/2 - node.sprite.height/2;

			var nodePadding = 40;
			if (node.connectedDirection == LEFT) {
				node.sprite.x -= node.sprite.width/2 + parentNode.sprite.width/2 + nodePadding;
			} else if (node.connectedDirection == RIGHT) {
				node.sprite.x += node.sprite.width/2 + parentNode.sprite.width/2 + nodePadding;
			} else if (node.connectedDirection == TOP) {
				node.sprite.y -= node.sprite.height/2 + parentNode.sprite.height/2 + nodePadding;
			} else if (node.connectedDirection == BOTTOM) {
				node.sprite.y += node.sprite.height/2 + parentNode.sprite.height/2 + nodePadding;
			}

			var x1 = node.sprite.x + node.sprite.width/2;
			var y1 = node.sprite.y + node.sprite.height/2;
			var x2 = parentNode.sprite.x + parentNode.sprite.width/2;
			var y2 = parentNode.sprite.y + parentNode.sprite.height/2;
			var dist = pointDistance(x1, y1, x2, y2);
			var line = addRectImage(dist, 4, 0x752b2b);
			worldMap.container.addChild(line);
			line.x = x1;
			line.y = y1;
			line.layer = GRAPH_LINE_LAYER;
			line.rotation = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
		}

		var icon = null;
		if (!node.entry.seenUnlocked) {
			icon = addImage("writer/nodeLock");
		} else if (node.entry.seenCompleted) {
			icon = addImage("writer/fullCheck");
		} else if (node.entry.started && node.checkmark) {
			icon = addImage("writer/halfCheck");
		} else {
			icon = addEmptyImage(32, 32);
		}

		icon.x = node.sprite.width - icon.width/2;
		icon.y = -icon.height/2;
		icon.scaleX = 0.6;
		icon.scaleY = 0.6;
		node.sprite.addChild(icon);
		node.progressIcon = icon;

		icon.scaleX = icon.scaleY = 0.8;

		if (node.entry.unlocked && !node.entry.seenUnlocked) {
			worldMap.newlyUpdatedNodes.push(node);
		}

		if (node.entry.completed && !node.entry.seenCompleted) {
			worldMap.newlyUpdatedNodes.push(node);
		}
	});

	worldMap.prevLocX = 0;
	worldMap.prevLocY = 0;
	worldMap.startMoveTime = time;
	worldMap.curPhase = 0;

	worldMap.poofAnim = addImage("writer/poof");
	worldMap.poofAnim.alpha = 0;
	worldMap.container.addChild(worldMap.poofAnim);

	enableExit();

	var buttonPad = 10;
	var buttonEdgePad = 10;
	worldMap.saveButton = addImage("writer/save");
	worldMap.saveButton.scaleX = worldMap.saveButton.scaleY = 2;
	worldMap.saveButton.x = exitButton.x;
	worldMap.saveButton.y = exitButton.y + exitButton.height * exitButton.scaleY + buttonPad;

	worldMap.loadButton = addImage("writer/load");
	worldMap.loadButton.scaleX = worldMap.loadButton.scaleY = 2;
	worldMap.loadButton.x = worldMap.saveButton.x;
	worldMap.loadButton.y = worldMap.saveButton.y + worldMap.saveButton.height * worldMap.saveButton.scaleY  + buttonPad;

	worldMap.extrasButton = addImage("writer/extras");
	worldMap.extrasButton.scaleX = worldMap.extrasButton.scaleY = 2;
	worldMap.extrasButton.x = worldMap.loadButton.x;
	worldMap.extrasButton.y = worldMap.loadButton.y + worldMap.loadButton.height * worldMap.loadButton.scaleY   + buttonPad;

	hookTempUpdate(worldMap.update);
};

worldMap.update = function() {
	if (mouseJustDown) {
		worldMap.dragging = true;
		worldMap.dragPointX = mouseX - worldMap.container.x;
		worldMap.dragPointY = mouseY - worldMap.container.y;
	}

	if (mouseJustUp) {
		worldMap.dragging = false;
	}

	if (worldMap.dragging) {
		worldMap.container.x = mouseX - worldMap.dragPointX;
		worldMap.container.y = mouseY - worldMap.dragPointY;
	}

	var currentFocusedNode = worldMap.newlyUpdatedNodes[0];
	if (currentFocusedNode) {
		var nextPosX = currentFocusedNode.sprite.x + currentFocusedNode.sprite.width/2;
		var nextPosY = currentFocusedNode.sprite.y + currentFocusedNode.sprite.height/2;

		nextPosX = gameWidth/2 - nextPosX;
		nextPosY = gameHeight/2 - nextPosY;

		if (worldMap.curPhase == 0) {
			var perc = (time - worldMap.startMoveTime) / 1;
			var tweenPerc = perc;
			perc = tweenEase(perc, QUAD_IN_OUT);

			var curX = lerp(perc, worldMap.prevLocX, nextPosX);
			var curY = lerp(perc, worldMap.prevLocY, nextPosY);
			worldMap.container.x = curX;
			worldMap.container.y = curY;

			if (tweenPerc >= 1) {
				worldMap.startMoveTime = time;
				worldMap.curPhase = 1;

				worldMap.poofAnim.alpha = 1;
				worldMap.poofAnim.x = currentFocusedNode.sprite.x + currentFocusedNode.sprite.width/2 - worldMap.poofAnim.width/2;
				worldMap.poofAnim.y = currentFocusedNode.sprite.y + currentFocusedNode.sprite.height/2 - worldMap.poofAnim.height/2;
			}
		}

		if (worldMap.curPhase == 1) {
			if (worldMap.poofAnim.alpha == 0) {
				worldMap.startMoveTime = time;
				worldMap.curPhase = 0;
				worldMap.newlyUpdatedNodes.shift();
				worldMap.prevLocX = worldMap.container.x;
				worldMap.prevLocY = worldMap.container.y;
			}
		} else {
			worldMap.poofAnim.gotoFrame(0);
		}
	} else {
		worldMap.curPhase = 2;
	}

	Object.keys(worldMap.nodes).some(function(nodeKey) {
		var node = worldMap.nodes[nodeKey];

		var spr = node.sprite;
		if (node.entry.seenUnlocked) {
			node.sprite.tint = 0;

			if (worldMap.curPhase == 2) {
				if (spr.justReleased) {
					gotoPassage(node.dest);
					node.entry.started = true;
					return true;
				}

				//var scaleSpeed = 0.05;
				spr.scaleX = spr.scaleY = 1;

				if (spr.hovering) {
					var moveUpPerc = spr.hoveringTime / 0.4;
					if (moveUpPerc > 1) moveUpPerc = 1;
					moveUpPerc = tweenEase(moveUpPerc, ELASTIC_OUT);

					spr.scaleX += moveUpPerc*0.2;
					spr.scaleY += moveUpPerc*0.15;
				}

				if (spr.justHovered) {
					playEffect("audio/ui/hoverChoiceIcons");
				}
			}

		} else {
			node.sprite.tint = 0xCC0d0d0d;

			if (spr.justReleased) {
				playEffect("audio/ui/nopeNode");
			}

			if (spr.justHovered) {
				playEffect("audio/ui/myntTalk");
			}

			spr.scaleX = spr.scaleY = 1;

			if (spr.hovering) {
				var moveUpPerc = spr.hoveringTime / 0.8;
				if (moveUpPerc > 1) moveUpPerc = 1;
				moveUpPerc = tweenEase(moveUpPerc, QUINT_OUT);

				spr.scaleX += moveUpPerc*0.07;
				spr.scaleY += moveUpPerc*0.1;
			}
		}
	});

	if (worldMap.curPhase == 2) {
		if (worldMap.saveButton.justReleased) {
			saveGame();
		}

		if (worldMap.loadButton.justReleased) {
			loadGame();
		}

		if (worldMap.extrasButton.justReleased) {
			gotoPassage("scratchModStart");
		}
	}

	if (worldMap.poofAnim.alpha != 0 && worldMap.poofAnim.currentFrame == round((worldMap.poofAnim.totalFrames-2)/2)) {
		if (currentFocusedNode.entry.unlocked && !currentFocusedNode.entry.seenUnlocked) {
			currentFocusedNode.entry.seenUnlocked = true;
			currentFocusedNode.progressIcon.destroy();
		}

		if (currentFocusedNode.entry.completed && !currentFocusedNode.entry.seenCompleted) {
			currentFocusedNode.entry.seenCompleted = true;
			currentFocusedNode.progressIcon.destroy();
			currentFocusedNode.progressIcon = addImage("writer/fullCheck");
			currentFocusedNode.progressIcon.x = currentFocusedNode.sprite.width - currentFocusedNode.progressIcon.width/2;
			currentFocusedNode.progressIcon.y = -currentFocusedNode.progressIcon.height/2;
			currentFocusedNode.sprite.addChild(currentFocusedNode.progressIcon);
		}
	}

	//@hack Doing this one frame early because update timing is bad
	if (worldMap.poofAnim.alpha != 0 && worldMap.poofAnim.currentFrame == worldMap.poofAnim.totalFrames-2) {
		worldMap.poofAnim.alpha = 0;
	}
};
