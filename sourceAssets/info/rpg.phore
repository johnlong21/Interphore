var rpg = null;
var MICRO_DELAY = 0.25;
var SMALL_DELAY = 0.5;

var MAGIC_DAMAGE = 1;
var PHYSICAL_DAMAGE = 2;

var CAST_ACTION = 3;
var START_OF_TURN_BUFF_ACTION = 4;
var AI_CHOICE_ACTION = 5;
var END_TURN_ACTION = 6;

var ATTACK_PICKED = 7;
var MAGIC_PICKED = 8;
var ITEM_PICKED = 9;

function initRpgBattle() {
	rpg = {
		playing: false,
		players: [],
		enemies: [],
		whenDone: null,
		units: [],
		cycle: [],
		unitArrow: null,
		currentUnit: null,
		currentSpell: null,
		currentAction: null,
		endAfterActions: false,
		pickedType: 0,
		spells: [],
		buffs: [],
		ais: [],
		actionList: [],
		pastActionList: [],
		actionListText: null
	};
}

function deinitRpgBattle(won) {
	rpg.playing = false;

	rpg.units.forEach(function(unit) {
		unit.sprite = null;
		unit.statBox = null;
		unit.nameTf = null;
		unit.hpBar = null;
		unit.mpBar = null;
		unit.limitBar = null;

		unit.buffTrackers.forEach(function(buffTracker) {
			buffTracker.icon = null;
		});
	});

	clear();
	rpg.whenDone();
}

function createUnit() {
	var unit;

	unit = {
		name: "unnamed",
		hp: 999,
		maxHp: 999,
		mp: 999,
		maxMp: 999,
		limit: 0,
		attack: 10,
		defence: 10,
		speed: 5,
		specialAttack: 10,
		friendly: false,
		dead: false,
		skipsNextTurn: false,
		spellNames: [],
		ai: "none",
		buffTrackers: [],
		affinities: [],
		/// Temp:
		originX: 0,
		originY: 0,
		sprite: null,
		statBox: null,
		nameTf: null,
		hpBar: null,
		mpBar: null,
		limitBar: null
	};

	return unit;
}

function createBuff() {
	var buff;
	buff = {
		name: "Unnamed buff",
		iconName: "Abuse.png",
		info: "No info",
		lastingTurns: 999,
		executeDamaged: function(unit, damage, spell) {
			return damage;
		},
		executeAttacked: function(unit, spell) {
		},
		executeAttacking: function(unit, damage, spell) {
			return damage
		},
		executeStartOfTrun: function(unit) {
			actionDone();
		}
	};

	rpg.buffs.push(buff);
	return buff;
}

function createSpell() {
	var spell;
	spell = {
		name: "Unnamed spell",
		info: "No spell info",
		baseDamage: 300,
		cost: 50,
		damageType: MAGIC_DAMAGE,
		targetsAllies: false,
		targetsEnemies: true,
		targetsDead: false,
		targetsNone: false,
		isAttack: false,
		ignoreExtraDamage: false,
		affinities: [],
		doPartialDamage: function(target, perc) {
			if (typeof target === "number") {
				print("-------------------- ERROR: Called doPartialDamage with bad args");
				return;
			}
			if (Math.abs(perc) <= 0.001) return;
			if (spell.damagePercDone + perc >= 1) perc = 1 - spell.damagePercDone;
			if (spell.baseDamage != 0) doDamage(target, spell.damage * perc);
			spell.damagePercDone += perc;
		},
		execute: function(source, target) {
			spellDone();
		},
		damage: 0,
		damagePercDone: 0,
		source: null,
		target: null
	};

	rpg.spells.push(spell);
	return spell;
}

function createAi() {
	var ai;
	ai = {
		name: "Unnamed AI",
		execute: function(unit) {
			skip();
		},
		executeSpawned: function(unit) {
		}
	};

	rpg.ais.push(ai);
	return ai;
}

function createAction() {
	var action = {
		type: 0,
		source: null,
		target: null,
		spellName: "none",
		buffName: "none",
		usedAsItem: false
	};

	rpg.actionList.push(action);
	return action;
}

function startRpgBattle(players, enemies, whenDone) {
	rpg.playing = true;
	rpg.whenDone = whenDone;

	clear();
	choicesPerPage = 8;
	append("Battle start!\n");

	players.forEach(function(unit) {
		unit.friendly = true;
		addUnit(unit);
	});

	enemies.forEach(function(unit) {
		unit.friendly = false;
		addUnit(unit);
	});

	rpg.units.sort(function(a, b) {
		var order = b.speed - a.speed;
		if (order == 0) {
			return a.name < b.name ? -1 : 1;
		} else {
			return order;
		}
	});

	rpg.unitArrow = addRectImage(32, 32, 0xFFFF00);

	tempUpdateFunctions.push(updateRpgBattle);

	rpg.units.forEach(function(unit) {
		resetUnitPosition(unit);

		var ai = getAi(unit.ai);
		if (ai) ai.executeSpawned(unit);
	});

	nextTurn();
}

function updateRpgBattle() {
	if (keyJustPressed("`".charCodeAt(0))) {
		if (!rpg.actionListText) {
			rpg.actionListText = addEmptyImage(512, 1024);
			rpg.actionListText.setFont("NunitoSans-Light_22");
		} else {
			rpg.actionListText.destroy();
			rpg.actionListText = null;
		}
	}

	var actionStr = "";
	function pushActionText(action) {
		var newText = "";
		if (action.type == CAST_ACTION)                     newText += "Spell cast: "+action.spellName+" "+action.source.name+"->"+action.target.name;
		else if (action.type == START_OF_TURN_BUFF_ACTION)  newText += "Turn start buff: "+action.buffName+" on "+action.source.name;
		else if (action.type == AI_CHOICE_ACTION)           newText += "Ai turn: "+action.source.name+" with AI "+action.source.ai;
		else if (action.type == END_TURN_ACTION)            newText += "End turn: "+action.source.name;
		else                                                newText += "Unknowned action type "+action.type;

		actionStr += newText + "\n";
	}

	rpg.pastActionList.forEach(function(pastAction) {
		pushActionText(pastAction);
	});

	if (rpg.currentAction) actionStr += "^^^^\n";

	rpg.actionList.forEach(function(futureAction) {
		pushActionText(futureAction);
	});

	if (rpg.actionListText) {
		rpg.actionListText.setText(actionStr);
		rpg.actionListText.tint = 0xFFFFFFFF;
		rpg.actionListText.x = gameWidth/2 - rpg.actionListText.textWidth/2;
		rpg.actionListText.y = gameHeight/2 - rpg.actionListText.textHeight/2;
	}

	if (!rpg.currentAction && rpg.actionList.length > 0) {
		rpg.units.forEach(function(unit) {
			if (unit.hp <= 0) {
				unit.dead = true;
				tween(unit.sprite, 0.5, {rotation: 90});
			}
		});

		var action = rpg.actionList.shift();
		rpg.currentAction = action;

		rpg.pastActionList.push(action);
		if (rpg.pastActionList.length > 5) rpg.pastActionList.shift();

		if (action.type == CAST_ACTION) {
			var spell =             getSpell(action.spellName);
			rpg.currentSpell =      spell;
			spell.damagePercDone =  0;
			spell.source =          action.source;
			spell.target =          action.target;
			spell.damage =          spell.baseDamage;

			if (spell.isAttack) {
				spell.damage += spell.source.attack;
				spell.damage -= spell.target.defence;
			}

			var hasAffinity = arrayContainsAny(spell.source.affinities, spell.affinities);

			if (spell.isAttack) {
				if (hasAffinity) spell.source.limit += spell.damage;
			} else if (!action.usedAsItem) { // Must be magic
				spell.source.mp -= spell.cost;
				if (hasAffinity) spell.source.limit += spell.cost;
			}

			if (action.usedAsItem) arrayForceRemove(spell.source.itemNames, spell.name);

			var buffs = getBuffs(action.source);
			buffs.forEach(function(buff) {
				spell.damage = buff.executeAttacking(spell.target, spell.damage, spell);
			});

			spell.execute(spell.source, action.target);

			if (spell.damage > 0) {
				var buffs = getBuffs(action.target);
				buffs.forEach(function(buff) {
					buff.executeAttacked(spell.target, spell);
				});
			}
		} else if (action.type == START_OF_TURN_BUFF_ACTION) {
			getBuff(action.buffName).executeStartOfTrun(action.source);
		} else if (action.type == AI_CHOICE_ACTION) {
			getAi(action.source.ai).execute(action.source);
			rpg.endAfterActions = true;
		} else if (action.type == END_TURN_ACTION) {
			nextTurn();
			if (!rpg.playing) return;
			actionDone();
		} else if (action.type == 0) {
			msg("Invalid action");
		}
	}

	if (rpg.endAfterActions) {
		rpg.endAfterActions = false;
		var action = createAction();
		action.type = END_TURN_ACTION;
		action.source = rpg.currentUnit;
	}

	rpg.units.forEach(function(unit) {
		unit.hp = clamp(unit.hp, 0, unit.maxHp);
		unit.mp = clamp(unit.mp, 0, unit.maxMp);
		unit.limit = clamp(unit.limit, 0, 100);

		if (unit.sprite.x + unit.sprite.width/2 < gameWidth/2) {
			unit.statBox.x = unit.sprite.x + unit.sprite.width + 32;
		} else {
			unit.statBox.x = unit.sprite.x - unit.statBox.width - 32;
		}
		unit.statBox.y = unit.sprite.y;

		unit.hpBar.tint = 0xFF00FF00;
		unit.mpBar.tint = 0xFF0000FF;
		unit.limitBar.tint = 0xFFFFFF00;

		unit.hpBar.scaleX = unit.hp / unit.maxHp;
		unit.mpBar.scaleX = unit.mp / unit.maxMp;
		unit.limitBar.scaleX = unit.limit / 100;
	});

	if (rpg.currentUnit) {
		var unitSpr = rpg.currentUnit.sprite;
		rpg.unitArrow.x = unitSpr.x + unitSpr.width/2 - rpg.unitArrow.width/2;
		rpg.unitArrow.y = unitSpr.y - rpg.unitArrow.height - 20 + Math.sin(time)*20;
	}
}

function addUnit(unit) {
	unit.sprite = addRectImage(64, 128, 0xFFFFFF);
	unit.sprite.centerPivot = true;

	unit.statBox = addEmptyImage(128, 64);

	unit.nameTf = addEmptyImage(unit.statBox.width, 64);
	unit.nameTf.tint = 0xFFFFFFFF;
	unit.nameTf.setFont("NunitoSans-Light_22");
	unit.nameTf.setText(unit.name);
	unit.statBox.addChild(unit.nameTf);

	unit.hpBar = addRectImage(128, 4, 0xFFFFFF);
	unit.hpBar.y = unit.nameTf.y + unit.nameTf.textHeight;
	unit.statBox.addChild(unit.hpBar);

	unit.mpBar = addRectImage(128, 4, 0xFFFFFF);
	unit.mpBar.y = unit.hpBar.y + unit.hpBar.height;
	unit.statBox.addChild(unit.mpBar);

	unit.limitBar = addRectImage(128, 4, 0xFFFFFF);
	unit.limitBar.y = unit.mpBar.y + unit.mpBar.height;
	unit.statBox.addChild(unit.limitBar);

	if (unit.friendly) {
		unit.originX = 32 + rpg.players.length*70;
		unit.originY = 128 + rpg.players.length*(unit.sprite.height - 55);
		unit.sprite.tint = 0xFF0000FF;

		rpg.players.push(unit);
	} else {
		unit.originX = gameWidth - unit.sprite.width - 32 - rpg.enemies.length*70;
		unit.originY = 128 + rpg.enemies.length*(unit.sprite.height - 55);
		unit.sprite.tint = 0xFFFF6100;

		rpg.enemies.push(unit);
	}

	rpg.units.push(unit);
}


function actionDone() {
	var action = rpg.currentAction;
	if (!action) {
		print("Called actionDone with no currentAction");
		return;
	}
	if (action.type == CAST_ACTION) {
		if (rpg.currentSpell.baseDamage != 0) {
			// print("Spell "+rpg.currentSpell.name+" only did "+rpg.currentSpell.damagePercDone+" so we'll do the rest of: "+rpg.currentSpell.damage+" perc of: "+ (1-rpg.currentSpell.damagePercDone));
			if (!rpg.currentSpell.ignoreExtraDamage) rpg.currentSpell.doPartialDamage(action.target, 1-rpg.currentSpell.damagePercDone);
		}
	}

	rpg.currentAction = null;
}

function resetUnitPosition(unit) {
	unit.sprite.x = unit.originX;
	unit.sprite.y = unit.originY;
}

function startTurn() {
	var buffs = getBuffs(rpg.currentUnit);
	buffs.forEach(function(buff) {
		var action = createAction();
		action.type = START_OF_TURN_BUFF_ACTION;
		action.buffName = buff.name;
		action.source = rpg.currentUnit;
	});

	rpg.currentUnit.buffTrackers.forEach(function(buffTracker) {
		if (buffTracker.remove) return;
		buffTracker.turns--;
		if (buffTracker.turns <= 0) removeBuff(buffTracker.name, rpg.currentUnit);
	});

	timer(0.5, takeTurn);
}

function takeTurn() {
	if (rpg.currentUnit.skipsNextTurn) {
		rpg.currentUnit.skipsNextTurn = false;
		skip();
		return;
	}

	if (rpg.currentUnit.ai == "none") {
		showMenu();
	} else {
		var action = createAction();
		action.type = AI_CHOICE_ACTION;
		action.source = rpg.currentUnit;
	}
}

function showMenu() {
	clearChoices();

	var listChoices = function(onChoose) {
		clearChoices();
		var arrayToSearch = rpg.currentUnit.spellNames;
		if (rpg.pickedType == ITEM_PICKED) arrayToSearch = rpg.currentUnit.itemNames;
		var seen = [];

		arrayToSearch.forEach(function(spellName) {
			var spell = getSpell(spellName);

			if (rpg.pickedType == ITEM_PICKED) {
				if (arrayContains(seen, spellName)) return;
				seen.push(spellName);
			}

			if (rpg.pickedType == ATTACK_PICKED && !spell.isAttack) return;
			if (rpg.pickedType == MAGIC_PICKED && spell.isAttack) return;

			var buttonText = spellName;
			if (rpg.pickedType == MAGIC_PICKED) buttonText += "\n"+spell.cost+"mp";
			if (rpg.pickedType == ITEM_PICKED) buttonText += "\nx"+arrayCount(arrayToSearch, spellName);

			var magicChoice = addChoice(buttonText, function() {
				rpg.currentSpell = spell;
				onChoose();
			});

			magicChoice.sprite.whileHovering = function() {
				showTooltip(spell.info);
			}
		});

		addChoice("Go back", showMenu);
	}

	var chooseAttack = function() {
		rpg.pickedType = ATTACK_PICKED;
		listChoices(chooseTarget);
	}

	var chooseMagic = function() {
		rpg.pickedType = MAGIC_PICKED;
		listChoices(chooseTarget);
	}

	var chooseItem = function() {
		rpg.pickedType = ITEM_PICKED;
		listChoices(chooseTarget);
	}

	var chooseTarget = function() {
		clearChoices();

		if (rpg.currentSpell.targetsNone) {
			var action = castSpell(rpg.currentSpell.name, rpg.currentUnit, rpg.units[0]);
			if (rpg.pickedType == ITEM_PICKED) action.usedAsItem = true;
			rpg.endAfterActions = true;
			return;
		}

		var unitChoices = [];
		rpg.units.forEach(function(unit) {
			var addUnit = true;
			if (unit.dead && !rpg.currentSpell.targetsDead) addUnit = false;
			if (unit.friendly && !rpg.currentSpell.targetsAllies) addUnit = false;
			if (!unit.friendly && !rpg.currentSpell.targetsEnemies) addUnit = false;
			if (addUnit) unitChoices.push(unit);
		});

		unitChoices.sort(function(a, b) {
			return a.name < b.name ? -1 : 1;
		});

		unitChoices.forEach(function(unit) {
			addChoice(unit.name, function() { 
				clearChoices();
				var action = castSpell(rpg.currentSpell.name, rpg.currentUnit, unit);
				if (rpg.pickedType == ITEM_PICKED) action.usedAsItem = true;
				rpg.endAfterActions = true;
			});
		});

		addChoice("Go back", showMenu);
	}

	addChoice("Attack", chooseAttack);
	addChoice("Magic", chooseMagic);
	addChoice("Item", chooseItem);
	addChoice("Skip", skip);
}

function skip() {
	clearChoices();
	var action = createAction();
	action.type = END_TURN_ACTION;
	action.source = rpg.currentUnit;
}

function castSpell(spellName, source, target) {
	var action = createAction();
	action.type = CAST_ACTION;
	action.spellName = spellName;
	action.source = source;
	action.target = target;
	return action;
}

function nextTurn() {
	if (rpg.currentUnit) {
		for (var i = rpg.currentUnit.buffTrackers.length-1; i > 0; i--) {
			var tracker = rpg.currentUnit.buffTrackers[i];
			if (tracker.remove) arrayForceRemove(rpg.currentUnit.buffTrackers, tracker);
		}
	}

	var playersAlive = 0;
	var enemiesAlive = 0;

	rpg.players.forEach(function(player) {
		if (!player.dead) playersAlive++;
	});

	rpg.enemies.forEach(function(enemy) {
		if (!enemy.dead) enemiesAlive++;
	});

	if (playersAlive == 0) {
		deinitRpgBattle(true);
		return;
	}

	if (enemiesAlive == 0) {
		deinitRpgBattle(false);
		return;
	}

	if (rpg.cycle.length == 0) {
		rpg.units.forEach(function(unit) {
			rpg.cycle.push(unit);
		});
	}

	rpg.currentUnit = rpg.cycle.shift();

	if (rpg.currentUnit.dead) {
		nextTurn();
		return;
	}

	startTurn();
}

function doDamage(unit, amount) {
	var buffs = getBuffs(unit);
	buffs.forEach(function(buff) {
		amount = buff.executeDamaged(unit, amount, rpg.currentSpell);
	});

	unit.hp -= amount;

	var tf = addEmptyImage(128, 128);
	tf.tint = amount > 0 ? 0xFFFF0000 : 0xFF00FF00;
	tf.setFont("NunitoSans-Light_22");
	if (amount > 0) {
		tf.setText("-" + amount);
	} else {
		tf.setText("+" + (-amount));
	}

	tf.x = unit.sprite.x + rndFloat(-20, 20);
	tf.y = unit.sprite.y + rndFloat(-20, 20);

	tween(tf, 2, { y: tf.y - 100, alpha: 0 }, { onComplete: function() {
		tf.destroy();
	}});
}

function getSpell(spellName) {
	var retSpell = null;
	rpg.spells.forEach(function(spell) {
		if (spellName == spell.name) {
			retSpell = spell;
			return;
		}
	});

	if (retSpell == null) {
		print("Failed to get spell named: "+spellName);
		return null;
	}
	return Object.assign(retSpell);
}

function getAi(aiName) {
	var retAi = null;
	rpg.ais.forEach(function(ai) {
		if (aiName == ai.name) {
			retAi = ai;
			return;
		}
	});

	return retAi;
}

function getBuff(buffName) {
	var retBuff = null;
	rpg.buffs.forEach(function(buff) {
		if (buffName == buff.name) {
			retBuff = buff;
			return;
		}
	});

	return retBuff;
}

function getBuffs(unit) {
	var buffs = [];

	unit.buffTrackers.forEach(function(buffTracker) {
		if (buffTracker.remove) return;
		buffs.push(getBuff(buffTracker.name));
	});

	return buffs;
}

function applyBuff(buffName, unit) {
	rpg.buffs.forEach(function(buff) {
		if (buff.name == buffName) {
			var buffTracker = {
				name: buff.name,
				turns: buff.lastingTurns,
				remove: false,
				/// Temp:
				icon: null
			};

			buffTracker.icon = addImage(buff.iconName);
			buffTracker.icon.whileHovering = function() {
				showTooltip(buff.info + "\n" + buffTracker.turns + " more turns");
			};
			unit.statBox.addChild(buffTracker.icon);


			unit.buffTrackers.push(buffTracker);
		}
	});

	updateBuffPosition(unit);
}

function removeBuff(buffName, unit) {
	unit.buffTrackers.some(function(buffTracker) {
		if (buffTracker.name == buffName && !buffTracker.remove) {
			buffTracker.remove = true;
			buffTracker.icon.destroy();
			return true;
		}
	});

	updateBuffPosition(unit);
}

function updateBuffPosition(unit) {
	var xpos = 0;
	unit.buffTrackers.forEach(function(buffTracker) {
		if (buffTracker.remove) return;
		buffTracker.icon.x = xpos;
		buffTracker.icon.y = unit.limitBar.y + unit.limitBar.height;
		xpos += buffTracker.icon.width;
	});
}

function giveItem(itemName, unit) {
	unit.itemNames.push(itemName);
}

function hasBuff(buffName, unit) {
	var doesHave = false;
	unit.buffTrackers.forEach(function(buffTracker) {
		if (buffTracker.remove) return;
		if (buffTracker.name == buffName) doesHave = true;
	});

		return doesHave;
}

function getRandomPlayer() {
	var livingPlayers = [];
	rpg.players.forEach(function(player) {
		if (!player.dead) livingPlayers.push(player);
	});

	return livingPlayers[rndInt(0, livingPlayers.length-1)];
}

function getRandomEnemy() {
	var livingEnemies = [];
	rpg.enemies.forEach(function(enemy) {
		if (!enemy.dead) livingEnemies.push(enemy);
	});

	return livingEnemies[rndInt(0, livingEnemies.length-1)];
}
