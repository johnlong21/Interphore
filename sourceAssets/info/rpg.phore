function createRpgChar() {
	var rpgChar;

	rpgChar = {
		name: "unnamed",
		hp: 100,
		maxHp: 100,
		mp: 100,
		maxMp: 100,
		attack: 50,
		defence: 20,
		speed: 50,
		friendly: false,
		dead: false,
		sprite: null,
		statBox: null,
		nameTf: null,
		hpBar: null,
		mpBar: null,
		limitBar: null
	};

	return rpgChar;
}

var rpg = null;
var SMALL_DELAY = 0.5;
var MICRO_DELAY = 0.25;
function startRpgBattle(players, enemies) {
	rpg = {
		players: players,
		enemies: enemies,
		units: [],
		turnIndex: 0,
		currentUnit: null
	}

	players.forEach(function(unit) {
		unit.friendly = true;
		rpg.units.push(unit);
	});

	enemies.forEach(function(unit) {
		unit.friendly = false;
		rpg.units.push(unit);
	});

	rpg.units.sort(function(a, b) {
		return b.speed - a.speed;
	});

	clear();
	append("Battle start!\n");

	rpg.units.forEach(function(unit) {
		unit.sprite = addRectImage(64, 128, 0xFFFFFF);

		unit.statBox = addEmptyImage(128, 64);

		unit.nameTf = addEmptyImage(unit.statBox.width, 64);
		unit.nameTf.tint = 0xFFFFFFFF;
		unit.nameTf.setFont("NunitoSans-Light_22");
		unit.nameTf.setText(unit.name);
		unit.statBox.addChild(unit.nameTf);

		unit.hpBar = addRectImage(128, 4, 0xFFFFFF);
		unit.hpBar.y = unit.nameTf.y + unit.nameTf.textHeight;
		unit.statBox.addChild(unit.hpBar);

		unit.mpBar = addRectImage(128, 4, 0xFFFFFF);
		unit.mpBar.y = unit.hpBar.y + unit.hpBar.height;
		unit.statBox.addChild(unit.mpBar);

		unit.limitBar = addRectImage(128, 4, 0xFFFFFF);
		unit.limitBar.y = unit.mpBar.y + unit.mpBar.height;
		unit.statBox.addChild(unit.limitBar);
	});

	tempUpdateFunctions.push(updateRpgBattle);

	rpg.turnIndex = -1;
	nextTurn();
}

function updateRpgBattle() {
	rpg.units.forEach(function(unit) {
		unit.statBox.x = unit.sprite.x + unit.sprite.width + 32;
		unit.statBox.y = unit.sprite.y;

		unit.hpBar.tint = 0xFF00FF00;
		unit.mpBar.tint = 0xFF0000FF;
		unit.limitBar.tint = 0xFFFF00FF;

		unit.hpBar.scaleX = unit.hp / unit.maxHp;
		unit.mpBar.scaleX = unit.mp / unit.maxMp;

		if (unit.statBox.x + unit.statBox.width > gameWidth) unit.statBox.x = unit.sprite.x - unit.statBox.width - 32;
	});
}

function resetUnitPositions() {
	rpg.units.forEach(function(unit) {
		unit.sprite.rotation = unit.dead ? 90 : 0;
	});

	rpg.players.forEach(function(unit, i) {
		var spr = unit.sprite;
		spr.x = 128 + spr.width/2 + i*16;
		spr.y = 128 + i*(spr.height-16);
		unit.sprite.tint = 0xFF0000FF;
	});

	rpg.enemies.forEach(function(unit, i) {
		var spr = unit.sprite;
		spr.x = gameWidth - 128 - spr.width/2 - i*16;
		spr.y = 128 + i*(spr.height - 16);
		unit.sprite.tint = 0xFFFF0000;
	});
}

function startTurn() {
	resetUnitPositions();

	if (rpg.currentUnit.friendly) {
		showMenu();
	} else {
		skip();
	}
}

function showMenu() {
	clearChoices();
	addChoice("Attack", chooseAttack);
	// addChoice("Item", item);
	addChoice("Skip", skip);
}

function chooseAttack() {
	clearChoices();
	rpg.units.forEach(function(unit) {
		if (!unit.friendly && !unit.dead) {
			addChoice(unit.name, function() { attack(rpg.currentUnit, unit); })
		}
	});

	addChoice("Go back", showMenu);
}

function attack(unit1, unit2) {
	clearChoices();
	append(unit1.name + " attacked " + unit2.name);
	var spr1 = unit1.sprite;
	var spr2 = unit2.sprite;

	timer(MICRO_DELAY, function() {
		if (unit1.friendly) {
			spr1.x = spr2.x - spr2.width - 16;
		} else {
			spr1.x = spr2.x + spr2.width + 16;
		}
		spr1.y = spr2.y;

		var damage = unit1.attack - unit2.defence;
		append(", did "+damage+" damage.\n");
		unit2.hp -= damage;
		if (unit2.hp <= 0) {
			unit2.dead = true;
			unit2.hp = 0;
		}
		timer(SMALL_DELAY, nextTurn);
	});
}

function item() {
	clearChoices();
}

function skip() {
	clearChoices();
	append(rpg.currentUnit.name+" skipped turn.\n");
	timer(SMALL_DELAY, nextTurn);
}

function nextTurn() {
	rpg.turnIndex++;
	if (rpg.turnIndex >= rpg.units.length) rpg.turnIndex = 0;
	rpg.currentUnit = rpg.units[rpg.turnIndex];

	if (rpg.currentUnit.dead) {
		nextTurn();
		return;
	}

	startTurn();
}
