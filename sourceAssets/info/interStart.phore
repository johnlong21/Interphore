setFontTag("i", "NunitoSans-Italic_26");
setFontTag("b", "NunitoSans-Bold_26");
setFontTag("ii", "NunitoSans-Italic_22");
setFontTag("bb", "NunitoSans-Bold_22");

var currentMusic;

var nextChoices = add9SliceImage("img/writer/writerChoice.png", 128, BUTTON_HEIGHT, 5, 5, 10, 10);
nextChoices.temp = false;
nextChoices.x = gameWidth - nextChoices.width;
nextChoices.y = gameHeight - nextChoices.height;
nextChoices.onRelease = function() {
	if (nextChoices.alpha != 1) return;
	var totalPages = choices.length / choicesPerPage;
	if (choicePage >= totalPages-1) return;
	playEffect("audio/ui/nextArrow");
	choicePage++;
}

var nextArrow = addImage("choiceArrow.png");
nextArrow.temp = false;
nextChoices.addChild(nextArrow);
nextArrow.tint = 0xFFa5e3f2;
nextArrow.x = nextChoices.width/2 - nextArrow.width/2;
nextArrow.y = nextChoices.height/2 - nextArrow.height/2;

var prevChoices = add9SliceImage("img/writer/writerChoice.png", 128, BUTTON_HEIGHT, 5, 5, 10, 10);
prevChoices.y = gameHeight - prevChoices.height;
prevChoices.temp = false;
prevChoices.onRelease = function() {
	if (prevChoices.alpha != 1) return;
	if (choicePage <= 0) return;
	playEffect("audio/ui/backArrow");
	choicePage--;
}

var prevArrow = addImage("choiceArrow.png");
prevArrow.temp = false;
prevChoices.addChild(prevArrow);
prevArrow.scaleX = -1;
prevArrow.tint = 0xFFa5e3f2;
prevArrow.x = prevChoices.width/2 - prevArrow.width/2 + prevArrow.width;
prevArrow.y = prevChoices.height/2 - prevArrow.height/2;

var exitButton = addImage("writer/exit.png");
exitButton.temp = false;
exitButton.scaleX = exitButton.scaleY = 2;
exitButton.x = gameWidth - exitButton.width*exitButton.scaleX - 16;
exitButton.y = 16;
exitButton.onRelease = function() {
	if (exitButton.alpha != 1) return;
	playEffect("audio/ui/exit.ogg");
	preventNextCheckpoint = true;
	gotoLastMap();
}
exitButton.whileHovering = function() {
	if (exitButton.alpha != 1) return;
	showTooltip("Exit (XP will be lost)");
}

var titleBg = addRectImage(gameWidth, 50, 0x2d354c);
titleBg.onRelease = function() {
	if (titleBg.alpha != 0) commandSkipped = true;
}
titleBg.temp = false;
titleBg.y = gameHeight/2 - titleBg.height/2;
titleBg.layer = TITLE_LAYER;

var titleTf = addEmptyImage(titleBg.width, titleBg.height);
titleTf.temp = false;
titleTf.setFont("NunitoSans-Bold_22");
titleTf.layer = TITLE_LAYER;
titleTf.tint = 0xFFdff9ff;
titleBg.addChild(titleTf);

var inputFieldBg = addRectImage(gameWidth, 100, 0x222222);
inputFieldBg.temp = false;
inputFieldBg.alpha = 0;
inputFieldBg.tint = 0x2d354c;

var inputField = addEmptyImage(gameWidth, 100);
inputFieldBg.addChild(inputField);
inputField.temp = false;
inputField.tint = 0xFFa5e3f2;
inputField.setFont("NunitoSans-Light_22");

var inputCarrot = addRectImage(4, 32, 0x2acbed);
inputFieldBg.addChild(inputCarrot);
inputCarrot.temp = false;

var inputTitle = addEmptyImage(gameWidth, 150);
inputTitle.temp = false;
inputFieldBg.addChild(inputTitle);
inputTitle.tint = 0xFFa5e3f2;
inputTitle.setFont("NunitoSans-Light_22");
inputTitle.alpha = 0.75;

var tooltipTf = addEmptyImage(256, 256);
tooltipTf.temp = false;
tooltipTf.tint = 0xFFFFFFFF;
tooltipTf.layer = TOOLTIP_TEXT_LAYER;

var tooltipBg = null;

var desiredWidth = 1280;
var desiredHeight = 720;

function exitMod() {
	gotoPassage("modsStart");
}

/// VN

var vn = {
	active: false,
	chars: [],
	charPad: 128,
	transitionTime: 0.5,

	textBg: null,
};

vn.init = function() {
	queueCall(function() { vn.initNow(); });
	vn.resetTextModes();
}
vn.initNow = function() {
	vn.active = true;
	disableExit();
}
vn.deinit = function() {
	queueCall(function() { vn.deinitNow(); });
}
vn.deinitNow = function() {
	enableExit();
	setTextArea_internal("");

	if (vn.textBg) vn.textBg.destroy();
	vn.textBg = null;

	vn.chars.forEach(function(curChar, i) {
		if (curChar) vn.unsetNow(i);
	});

	vn.chars = []; // This should almost be an assert
	vn.active = false;
}

vn.set = function(charNum, img, fontColour) {
	queueCall(function() { vn.setNow(charNum, img, fontColour); });
}
vn.setNow = function(charNum, img, fontColour) {
	if (fontColour === undefined) fontColour = 0xFFFFFFFF;

	var newChar = {
		fadedIn: false,
		slidIn: true,
		sprite: null,
		fontColour: fontColour,
	};

	if (vn.chars[charNum]) vn.unsetNow(charNum);

	newChar.sprite = addImage(img);
	newChar.sprite.alpha = 0;
	newChar.sprite.temp = false;

	vn.chars[charNum] = newChar;
}

vn.unset = function(charNum) {
	queueCall(function() { vn.unsetNow(charNum); });
}
vn.unsetNow = function(charNum) {
	vn.chars[charNum].sprite.destroy();
	arrayRemove(vn.chars, vn.chars[charNum]);
}

vn.delay = function(amount) {
	queueDelay(amount);
}

vn.moveIn = function(charNum, tranTime) {
	queueCall(function() { vn.moveInNow(charNum); });
	queueDelay(vn.transitionTime);
}
vn.moveInNow = function(charNum) {
	var spr = vn.chars[charNum].sprite;
	vn.chars[charNum].slidIn = true;
	vn.chars[charNum].fadedIn = true;
	spr.y = gameHeight;
}

vn.moveOut = function(charNum, tranTime) {
	queueCall(function() { vn.moveOutNow(charNum); });
	queueDelay(vn.transitionTime);
}
vn.moveOutNow = function(charNum) {
	vn.chars[charNum].slidIn = false;
	vn.chars[charNum].fadedIn = false;
}

vn.fadeIn = function(charNum, tranTime) {
	queueCall(function() { vn.fadeInNow(charNum); });
	queueDelay(vn.transitionTime);
}
vn.fadeInNow = function(charNum) {
	vn.chars[charNum].fadedIn = true;
}

vn.fadeOut = function(charNum, tranTime) {
	queueCall(function() { vn.fadeOutNow(charNum); });
	queueDelay(vn.transitionTime);
}
vn.fadeOutNow = function(charNum) {
	vn.chars[charNum].fadedIn = false;
}

vn.say = function(charNum, text, timeMulti) {
	if (timeMulti === undefined) timeMulti = 1;

	var textTime = 1 + text.length/100;
	textTime *= timeMulti;
	queueCall(function() { vn.sayNow(charNum, text, textTime); });
	queueSkippableDelay(textTime);
	queueCall(function() { vn.sayNow(charNum, text, 0); });
	queuePause();
}
vn.sayNow = function(charNum, text, textTime) {
	var spr = vn.chars[charNum].sprite;
	setTextAreaTint_internal(vn.chars[charNum].fontColour);
	setTextArea_internal(text);
	setTextAreaZoomTime_internal(textTime);
	var textWidth = getTextAreaWidth_internal();
	var textHeight = getTextAreaHeight_internal();

	var textX = spr.x + spr.width/2 - textWidth/2;
	var textY = gameHeight*0.75 - textHeight/2;
	moveTextArea_internal(textX, textY);

	if (vn.textBg) vn.textBg.destroy();
	vn.textBg = addRectImage(textWidth * 1.25, textHeight * 1.25);
	vn.textBg.alpha = 0.85;
	vn.textBg.temp = false;
	vn.textBg.layer = VN_TEXT_BG_LAYER;
	vn.textBg.x = textX + textWidth/2 - vn.textBg.width/2;
	vn.textBg.y = textY + textHeight/2 - vn.textBg.height/2;
}

vn.choice = function(text, result) {
	queueCall(function() { vn.choiceNow(text, result); });
}
vn.choiceNow = function(text, result) {
	addChoice(text, function() {
		skipCurrentCommand();
		clearChoices();
		if (result !== undefined) {
			if (typeof result === "string") {
				gotoPassage(result);
			} else {
				result();
			}
		}
	});
}

vn.effect = function(charNum, type) {
	queueCall(function() { vn.doEffectNow(charNum, type); }); 
}
vn.doEffectNow = function(charNum, type) {
	var spr = vn.chars[charNum].sprite;

	if (type == "shake") {
		tween(spr, 0.1, {x: spr.x + 4}, {type: PINGPONG});
	}
}

vn.cancelEffects = function(charNum) {
	queueCall(function() { vn.cancelEffectsNow(charNum); });
}
vn.cancelEffectsNow = function(charNum) {
	var spr = vn.chars[charNum].sprite;

	cancelTweens(spr);
}

vn.setTextZoomOut = function() {
	queueCall(function() { setTextAreaZoomOut_internal(); });
}
vn.setTextZoomIn = function() {
	queueCall(function() { setTextAreaZoomIn_internal(); });
}
vn.setTextJiggle = function(jiggleX, jiggleY) {
	queueCall(function() { setTextAreaJiggle_internal(jiggleX, jiggleY); });
}
vn.setTextRainbow = function() {
	queueCall(function() { setTextAreaRainbow_internal(); });
}
vn.setTextWave = function(waveX, waveY, waveTime) {
	queueCall(function() { setTextAreaWave_internal(waveX, waveY, waveTime); });
}

vn.resetTextModes = function() {
	queueCall(function() { resetTextAreaModes_internal(); });
	vn.setTextZoomIn();
}

vn.stop = function() {
	queueStop();
}

vn.update = function() {
	if (!vn.active) return;

	vn.chars.forEach(function(curChar, i) {
		var spr = curChar.sprite;

		var transSpeed = 1/(vn.transitionTime*60);
		if (curChar.fadedIn) {
			spr.alpha += transSpeed;
		} else {
			spr.alpha -= transSpeed;
		}

		var posRect = {x: 0, y: 0, width: 0, height: 0};
		posRect.height = gameHeight;
		posRect.width = gameWidth / vn.chars.length;
		posRect.x += posRect.width * i;
		spr.x = posRect.x + posRect.width/2 - spr.width/2;

		var slideSpeed = spr.height/(vn.transitionTime*60);
		if (curChar.slidIn) {
			spr.y -= slideSpeed;
			if (spr.y + spr.height < gameHeight) spr.y = gameHeight - spr.height;
		} else {
			spr.y += slideSpeed;
			if (spr.y > gameHeight) spr.y = gameHeight;
		}
	});
}

hookUpdate(vn.update);

/// /VN

addSoundTweak("audio/ui/exit", 0.1);
addSoundTweak("audio/ui/restart", 0.3);
addSoundTweak("audio/ui/newChoiceClick/1", 0.2);
addSoundTweak("audio/ui/newChoiceClick/2", 0.2);
addSoundTweak("audio/ui/newChoiceClick/3", 0.2);
addSoundTweak("audio/ui/newChoiceClick/4", 0.2);
addSoundTweak("audio/ui/newChoiceClick/5", 0.2);
addSoundTweak("audio/ui/newChoiceClick/6", 0.2);
addSoundTweak("audio/ui/newChoiceClick/7", 0.2);
addSoundTweak("audio/ui/newChoiceClick/8", 0.2);
addSoundTweak("audio/ui/newChoiceClick/9", 0.2);
addSoundTweak("audio/ui/bestChoiceClick/1", 0.2);
addSoundTweak("audio/ui/bestChoiceClick/2", 0.2);
addSoundTweak("audio/ui/bestChoiceClick/3", 0.2);
addSoundTweak("audio/ui/hoverChoiceButtons/1", 0.03);
addSoundTweak("audio/ui/hoverChoiceButtons/2", 0.03);
addSoundTweak("audio/ui/hoverChoiceButtons/3", 0.03);
addSoundTweak("audio/ui/tooltip/1", 0.2);
addSoundTweak("audio/ui/tooltip/2", 0.2);
addSoundTweak("audio/ui/tooltip/3", 0.2);
addSoundTweak("audio/ui/myntTalk/1", 0.6);
addSoundTweak("audio/ui/myntTalk/2", 0.6);
addSoundTweak("audio/ui/myntTalk/3", 0.6);
addSoundTweak("audio/ui/myntTalk/4", 0.6);
addSoundTweak("audio/ui/myntTalk/5", 0.6);
addSoundTweak("audio/ui/hoverChoiceIcons/1", 0.6);
addSoundTweak("audio/ui/hoverChoiceIcons/2", 0.6);
addSoundTweak("audio/ui/hoverChoiceIcons/3", 0.6);
addSoundTweak("audio/ui/nopeNode/1", 0.2);
addSoundTweak("audio/ui/nopeNode/2", 0.2);

addSoundTweak("audio/ui/msg/1", 0.7);
addSoundTweak("audio/ui/msg/2", 0.7);
addSoundTweak("audio/ui/msg/3", 0.7);
addSoundTweak("audio/ui/rewards/xp/1", 0.5);
addSoundTweak("audio/ui/rewards/xp/2", 0.5);
addSoundTweak("audio/ui/rewards/xp/3", 0.5);
addSoundTweak("audio/ui/rewards/xp/4", 0.35);
addSoundTweak("audio/ui/rewards/levels/1", 0.5);
addSoundTweak("audio/ui/rewards/levels/2", 0.5);
addSoundTweak("audio/ui/rewards/levels/3", 0.5);
addSoundTweak("audio/ui/rewards/boon/1", 0.5);
addSoundTweak("audio/ui/rewards/boon/2", 0.5);
addSoundTweak("audio/ui/rewards/boon/3", 0.5);
addSoundTweak("audio/ui/rewards/checkmark", 0.5);
addSoundTweak("audio/ui/rewards/party", 0.5);
addSoundTweak("audio/effect/trashTransmission", 0.7);
addSoundTweak("audio/effect/mapTransition", 0.2);
addSoundTweak("audio/effect/adminGained", 0.05);
addSoundTweak("audio/effect/despairSting", 0.8);
addSoundTweak("audio/effect/newSting", 0.5);
addSoundTweak("audio/effect/owlScream", 0.2);
addSoundTweak("audio/effect/buzzer", 0.2);
addSoundTweak("audio/effect/buzzerSpam", 0.2);
addSoundTweak("audio/effect/cartSlide/right/1", 0.5);
addSoundTweak("audio/effect/cartSlide/right/2", 0.5);
addSoundTweak("audio/effect/cartSlide/left/1", 0.5);
addSoundTweak("audio/effect/cartSlide/left/2", 0.5);

addSoundTweak("audio/music/newVictim", 0.1);
addSoundTweak("audio/music/newEngine", 0.2);
addSoundTweak("audio/music/newSelf", 0.3);
addSoundTweak("audio/music/bunnyLove", 0.4);
addSoundTweak("audio/music/violetMeteorite", 0.1);
addSoundTweak("audio/ambience/library", 0.2);
addSoundTweak("audio/ambience/cell", 0.1);
addSoundTweak("audio/ambience/shelterFan", 0.1);

streamEmbeddedTexture("NunitoSans-Light_22");
streamEmbeddedTexture("NunitoSans-Bold_22");

registerIcon("Abuse", "img/writer/icons/Abuse.png");
registerIcon("Art", "img/writer/icons/Art.png");
registerIcon("Baby", "img/writer/icons/Baby.png");
registerIcon("Blood", "img/writer/icons/Blood.png");
registerIcon("Cub", "img/writer/icons/Cub.png");
registerIcon("Drugs", "img/writer/icons/Drugs.png");
registerIcon("Female", "img/writer/icons/Female.png");
registerIcon("Feral", "img/writer/icons/Feral.png");
registerIcon("Foodplay", "img/writer/icons/Foodplay.png");
registerIcon("Gore", "img/writer/icons/Gore.png");
registerIcon("Hyper", "img/writer/icons/Hyper.png");
registerIcon("Intersex", "img/writer/icons/Intersex.png");
registerIcon("Love", "img/writer/icons/Love.png");
registerIcon("Male", "img/writer/icons/Male.png");
registerIcon("Music", "img/writer/icons/Music.png");
registerIcon("Piss", "img/writer/icons/Piss.png");
registerIcon("Plot", "img/writer/icons/Plot.png");
registerIcon("Pregnancy", "img/writer/icons/Pregnancy.png");
registerIcon("Prolapse", "img/writer/icons/Prolapse.png");
registerIcon("Raunch", "img/writer/icons/Raunch.png");
registerIcon("Scat", "img/writer/icons/Scat.png");
registerIcon("Snuff", "img/writer/icons/Snuff.png");
registerIcon("Toddler", "img/writer/icons/Toddler.png");
registerIcon("Trash", "img/writer/icons/Trash.png");
registerIcon("Vomit", "img/writer/icons/Vomit.png");
registerIcon("Candy Gore", "img/writer/icons/Candy-Gore.png");
registerIcon("Soft Vore", "img/writer/icons/Soft-Vore.png");
registerIcon("Guest Writer", "img/writer/icons/Guest-Writer.png");
registerIcon("Patreon Commission", "img/writer/icons/Patreon-Commission.png");
