START_PASSAGES
:scratchModStart
!`
if (music) music.destroy();
var music = playMusic("audio/ambience/violetMeteorite");
music.name = "music";

setBackground(0, "img/writer/mainBg");
setBackground(1, "");
choicesPerPage = 5;
`
Dev Menu

!`if (data.playerName === "" || data.playerName === undefined) append("Hi, no-name. Make sure you play through the intro or go to Hub and visit Red Pond to set your player variables."); else append("Hi "+data.playerName);`

Changelog 0.1.3
~~~~~~~~~~~~~~~

> Added Lone sequel: Looking for Trouble
- Lil goat boi tries to find a home that satisfies his peculiar needs
- Found in L.L.L. after you do the first Lone scene (or after you use the unlock everything cheat)

> Added Cage & Som: Black Mansion
- Plotty and hyperkinky, the return of Fuckmeat
- Found in Archiepelago

> Added Red & Mary
- New and improved wolf & bunny yuri! They're not cubs anymore...? Who talked who into that I wonder...
- Found in Archiepelago

> Gender, genitals, and species selection revamped with new art

> Souped up Mynt intro heavily, as is tradition. More branches and more context for wtf is going on

> Added a new f/f branch to the Indigo Pond guest scene by Pyreaus, for players with cunt. Scene now supports m/f and f/f. This game isn't just for fags you know

> UI
- New title screen + new track by Rocket: New Engine
- Polished map titles
- Polished node buttons
- New world map transition animation + sfx

> Art
- All Mynt art has now been HD-ified by Cubber!!!
- New holding dress Mynt expression by Cubber
- Old Rebeca by Cubber
- Young Rebeca by Cubber
- Furry Rebeca + all species variants by Cubber
- Added Lone ringing doorbell by Spunkymutt
- Added Allei + friends by fluffbug
- Added L.L.L. / G.C.D. background by Cubber
- Edited and re-used old Gray Meteorite by Cubber
- Archiepelago / Library2 background by Cubber
- Small MyntBeca indicator by Kittery
- The Red Sea background by Kittery

> Audio
- Added new track by Rocket: Love Bunny
- New title screen music by Rocket & edited to shit by Kittery
- Added "nope" sfx for disabled buttons
- Dingdong sfx
- Buzzer sfx
- Satisfying reward sfx
- Notification sfx
- World Map sfx

> Misc
- Choice icons now play a hover sound, move, and expand when you hover them
- Reworked the "Rules of Operation for Paraphores" in the L.L.L. for clarity
- New kink warning stolen partially from Paraphore
- Fixed not being able to skip delays during cutscenes
- Minor edits in many places
- Added the ability to shapeshift into a planet, a massive cock, or a fundamental law of nature to the Red Pond node
- Vague "Layer Select" title changed to "The Red Sea"
- Added choice button tooltip function
- Disabled choice buttons now play sfx when clicked
- Fixed 1000 mis-sized choice buttons across the whole game one by one
- The "unlock everything" cheat now plays a satisfying reward noise and msg
- Msgs now have sfx

As always, thanks so much for your support!!!! <3

[expTest]
[Mods|modsStart]
[Cheats|cheatsStart]
[Tests|testsStart]
[Teleports|teleStart]

[New|newStart]

!`
worldMap.completeEntry("Moving In");
if (internal) addChoice("VN test", "vnTest");
if (internal) addChoice("Weird choices", "weirdChoiceTest");
`
---
:expTest

This is the exp test.

!`
addChoice("add 10", function() {
	gainExp(10);
});
addChoice("add 30", function() {
	gainExp(30);
});
addChoice("add 45", function() {
	gainExp(45);
});
addChoice("Back", "scratchModStart");

`
---
:cheatsStart

[Back|scratchModStart]
[Change my body|setGenits]
[Change Mynt's body|Change Mynt's genitals]
[Unlock everything]
---
:setGenits

You find a red pond, no matter where you are.

If you jump in, you can change your body again.

[Jump in.]
[Back.|scratchModStart]
---
:Jump in.
!`
data.genitals = "";
data.hasBoobs = false;
data.gender = "";
data.playerName = "";
data.hasKnot = false;
`
You swan dive back into the red fluid and your body disintegrates. It feels kinda harsh and stingy at first, but then it mellows out. Being bodyless is very relaxing.
[Shapeshift.]
---
:Shapeshift.

You reach down and fiddle with yourself.

!`
if (!data.hasBoobs) addChoice("Boobs.", function() {
	data.hasBoobs = true;
	gotoPassage("Shapeshift.");
});

if (data.genitals !== "female" && data.genitals !== "both") addChoice("Cunt.", function() {
	if (data.genitals === "male") {
		data.genitals = "both";
	} else {
		data.genitals = "female";
	}
	gotoPassage("Shapeshift.");
});

if (data.genitals !== "male" && data.genitals !== "both") addChoice("Cock.", function() {
	if (data.genitals === "female") {
		data.genitals = "both";
	} else {
		data.genitals = "male";
	}
	gotoPassage("Shapeshift.");
});

if (data.genitals !== "male" && data.genitals !== "female" && data.genitals !== "both" && !data.hasBoobs) addChoice("Everything.", function() {
	data.hasBoobs = true;
	data.genitals = "both";
	gotoPassage("Shapeshift.2");
});

if (data.genitals === "female" || data.genitals === "male" || data.genitals === "both") addChoice("Ready.", "Shapeshift.2");`
---
:Shapeshift.2
You reach inside yourself and try to find your true identity.
!`
addChoice("He.", function() {
	data.gender = "male";
	gotoPassage("Shapeshift.3");
});

addChoice("She.", function() {
	data.gender = "female";
	gotoPassage("Shapeshift.3");
});

addChoice("They.", function() {
	data.gender = "both";
	gotoPassage("Shapeshift.3");
});
`
---
:Shapeshift.3
You try to think of a good label to slap on this tight lil package.
!`
addInputField();

addChoice("Submit.", function() {
	gotoPassage("Shapeshift.4");
});

addChoice("Dankpaw.", function() {
	data.playerName = "Dankpaw";
	gotoPassage("Shapeshift.4");
});

addChoice("Rebeca.", function() {
	data.playerName = "Rebeca";
	gotoPassage("Shapeshift.4");
});

addChoice("Phae.", function() {
	data.playerName = "Phae";
	gotoPassage("Shapeshift.4");
});
`
---
:Shapeshift.4
!`
if (data.playerName !== "Dankpaw" && data.playerName !== "Rebeca" && data.playerName !== "Phae") data.playerName = lastInput;
setTitle("");
`

All done, `data.playerName`.

[Back.|scratchModStart]
---
:Unlock everything

!`
msg("Unlocked everything!");
playEffect("audio/ui/rewards/boon");
data.unlockedDev = true;
data.metLone = true;
data.metCart = true;
data.hasLoungeKey = true;
data.hasBathroomKey = true;
data.tookStairs = true;
data.leftMynt = true;
data.metRen = true;
data.metPatch = true;
data.heardTransmission = true;
saveCheckpoint();
gotoPassage("cheatsStart");
`
---
:Change Mynt's genitals

She currently has `myntCock()`

!`addChoice("Cock", function() {
	data.myntCock = true;
	gotoPassage("Change Mynt's genitals");
});

addChoice("Cunt", function() {
	data.myntCock = false;
	gotoPassage("Change Mynt's genitals");
});

addChoice("Back", "scratchModStart");
`
---
:newStart

!`
addChoice("Thelly", "thellyMod", {icons: ["Cub", "Male"]});
addChoice("Lone", "loneMod", {icons: ["Cub", "Male", "Abuse"]});
addChoice("Mynt's Day Off", "myntMod");
addChoice("Cart's Transmission", "carttransMod");
addChoice("Back", "scratchModStart");
`
---
:carttransMod

!`
clear();
data.metRen = true;
data.heardTransmission = false;
execAsset("LLL.phore");
gotoPassage("hubLLL");
`
---
:myntMod

!`
clear();
execAsset("wendyApt2.phore");
gotoPassage("wendyApt2Start");
`

---
:teleStart

[Back|scratchModStart]
[Hub|thirstyCaves]
[Cart Intro|cartIntro]
[Wendy's Apartment|wendyApt]
[LLL]
[Red Pond|introModOriginal]
[Back|scratchModStart]
---
:stuckTest

!`
gotoPassage("pickedSpecies");
`

---
:testsStart

!`
choicesPerPage = 6;
`

[Back|scratchModStart]

!`
addChoice("Test unlocking nodes", function() {
	gotoScratch();
});
`

[New map test|newMapTest]


[Tween test|tweenTest]
[Background Test|backgroundTest]
[Input Text Test|inputTest]
[Icon Test|iconTest]
[Disable Exit Test|disableExitTest]
[Title test|titleTest]
[Audio Test|audioTest]
[Image test|imageTest]
[Variable test|variableTest]
[Save test|saveTest]
[Msg test|msgText]
[Text scrolling test|textScrollingTest]
[Tag test|tagTest]
[Benchmark|benchmark]
[Tooltip Test|tooltipTest]
[Word wrap Test|wordWrapTest]
[Rpg test|rpgTest]
[choices per passage test|choicesbluhtest]
[Back|scratchModStart]
---
:unlockNodes1

Hey bitch. :3

!`
msg("started scene1");
data.startedScene1 = true;
choicesPerPage = 2;
addChoice("Next.", "unlockNodes2");
addChoice("Back.", function() {
	gotoScratch();
});
`
---
:unlockNodes2

That was it. That was the whole scene.

!`
msg("finished scene1");
data.finishedScene1 = true;
choicesPerPage = 1;
addChoice("Back.", function() {
	gotoScratch();
});
`
---
:unlockNodesLocked

How the fuck did you get in here? 3:<

!`
choicesPerPage = 1;
addChoice("Back.", function() {
	gotoScratch();
});
`
---
:choicesbluhtest

!`
choicesPerPage = 1;
`
[This should be size of screen|choicesbluhtest2]
---
:choicesbluhtest2

!`
choicesPerPage = 1;
addChoice("this one too", "testsStart");
`
---
:thirstyCaves

!`
gotoThirstyCaves();
`

---
:thellyMod

!`
clear();
execAsset("thelly.phore");
gotoPassage("thellyModStart");
`
---
:loneMod

!`
clear();
execAsset("lone.phore");
gotoPassage("loneModStart");
`
---
:introModOriginal

!`
clear();
execAsset("introMod.phore");
gotoPassage("introModStart");
`
---
:cartIntro
!`
clear();
execAsset("introCart.phore");
gotoPassage("introModCartStart");
`

---
:wendyApt
!`
clear();
execAsset("wendyApt.phore");
gotoPassage("wendyAptStart");
`

---
:LLL
!`
clear();
execAsset("LLL.phore");
gotoPassage("hubLLL");
`
---
:backgroundTest
!`
setBackground(0, "myntBg", TILED);
backgrounds[0].bobY = 0.5;
setBackground(1, "myntBg2");
`
There's some backgrounds.
[Go back|scratchModStart]
---
:inputTest
Gimme some text.
!`addInputField("Right here:");`
[Continue|inputTest2]
---
:inputTest2
That text was (`lastInput`)
[Go back|scratchModStart]
---
:audioTest
This is a looping audio test
!`
addChoice("Place once", function() {
	var channel = playEffect("newChoiceClick/1.ogg");
	channel.name = "clickSound";
});

addChoice("Place looping", function() {
	var channel = playMusic("newChoiceClick/1.ogg");
	channel.name = "clickSound";
});

addChoice("Stop audio", function() {
	var channel = getAudio("clickSound");
	channel.destroy();
});
`
[Go back|scratchModStart]
---
:iconTest   
!`
// If going here fails it's because of the spaces after the title
`
This is a test of the icons

[Using the new icon syntax|scratchModStart] #Abuse #Cub

!`
addChoice("Go back", "scratchModStart", {icons: ["Male", "Female"]});
`
---
:disableExitTest
This is an example of disabling the exit button
!`
addChoice("Disable", function() {
	disableExit();
});
addChoice("Enable", function() {
	enableExit();
});
`
[Go back|scratchModStart]
---
:titleTest
Let's test some titles!
!`
addChoice("Go for it", function() {
	queueTitle("Hello");
	queueTitle("Can you hear me?");
});

addChoice("Back", function() {
	setTitle("");
	gotoPassage("scratchModStart");
});
`
---
:imageTest
!`
streamAsset("coin.png", "https://i.imgur.com/mmt2kcc.png");
streamAsset("test1.png", "https://upload.wikimedia.org/wikipedia/commons/d/dc/Large_Drive-In_EMC_Test_Chamber.png");

msg("Images loading...");
whenDoneStreaming(function() {
	gotoPassage("realImageTest");
});
`
---
:realImageTest
!`
var img = addRectImage(265, 128, 0xFF0000);
img.x = 800;
img.y = 800;

var coin = addImage("coin.png");
coin.x = 500;
coin.y = 100;

var test1 = addImage("test1.png");
test1.x = 0;
test1.y = 0;
test1.scaleX = test1.scaleY = 0.20;
`
[Go back|scratchModStart]
---
:variableTest
!`if (data.apples === undefined) data.apples = 1;`
This passage shows off basic variables.
[Let's get to it|variableMain]
---
:variableMain
You have `data.apples` apples.
[Gain an apple]
[Lose an apple]
[Leave|scratchModStart]
---
:Gain an apple
!`data.apples += 1;`
You gained an apple.
[Go back|variableMain]
---
:Lose an apple
!`data.apples -= 1;`
You lost an apple.
[Go back|variableMain]
---
:saveTest
!`saveCheckpoint();`
Your data has been saved, you can exit now without losing your data
[Nice!|scratchModStart]
---
:tweenTest
!`
var spr = addRectImage(65, 65, 0x0000FF);
spr.x = 600;
spr.y = 300;
tween(spr, 5, {scaleX: -3, rotation: 20}, {type: PINGPONG, ease: ELASTIC_OUT});
hookTempUpdate(function() {
	spr.alpha = spr.hovering ? 0.5 : 1;
});
`
[Go back|scratchModStart]
---
:msgText
!`
addChoice("Show some msgs", function() {
	msg("This is a test msg");
	msg("Here's another");
	msg("And another");
});
`
[Go back|scratchModStart]
---
:textScrollingTest
[Go back|scratchModStart]
!`
for (var i = 0; i < 40; i++) append("A line\n ");
`
---
:tagTest
This (<b>text)</b> has <i>tags!</i>
Some (<b>text</b>
Some [<b>text</b>
Some {<b>text</b>
Some a<b>text</b>
Some b<b>text</b>
Some c<b>text</b>
Some <b>(text)</b>
Some <b>(text</b>)
[Go back|scratchModStart]
---
:benchmark
This is going to be a sprite benchmark.

!`
choicesPerPage = 8;
var numSprites = 10;
var posEnabled = true;
var rotEnabled = true;
var scaleEnabled = true;
var alphaEnabled = true;

addChoice("-10", function() {
	numSprites -= 10;
	if (numSprites < 0) numSprites = 0;
});
addChoice("+10", function() {
	numSprites += 10;
});
addChoice("Pos", function() {
	posEnabled = !posEnabled;
});
addChoice("Rot", function() {
	rotEnabled = !rotEnabled;
});
addChoice("Scale", function() {
	scaleEnabled = !scaleEnabled;
});
addChoice("Alpha", function() {
	alphaEnabled = !alphaEnabled;
});
addChoice("Go back", "scratchModStart");

var timerTime = 3;

var curTime = 0;
var sprites = [];
if (true) {
	hookTempUpdate(function() {
		curTime += 1/60;
		if (curTime > timerTime) {
			curTime = 0;
			clearText();
			append(numSprites + " sprites");

			sprites.forEach(function(spr) {
				spr.destroy();
			});

			for (var i = 0; i < numSprites; i++) {
				var spr = addRectImage(64, 64, rndInt(0, 0xFFFFFF));
				spr.x = rndFloat(0, gameWidth);
				spr.y = rndFloat(0, gameHeight);
				sprites.push(spr);
			}
		}

		sprites.forEach(function(spr) {
			if (posEnabled) {
				spr.x += rndFloat(-5, 5);
				spr.y += rndFloat(-5, 5);
			}

			if (rotEnabled) {
				spr.rotation += rndFloat(-5, 5);
			}

			if (scaleEnabled) {
				spr.scaleX += rndFloat(-0.1, 0.1);
				spr.scaleY += rndFloat(-0.1, 0.1);
			}

			if (alphaEnabled) {
				spr.alpha += rndFloat(-0.1, 0.1);
			}

		});
	});
} else {
	var benchTimer = timer(timerTime, function() {
		clearText();
		append(numSprites + " sprites");

		var sprIndexArr = [];
		for (var i = 0; i < numSprites; i++) sprIndexArr.push(i);
		sprIndexArr.forEach(function(i) {
			var spr = addRectImage(64, 64, rndInt(0, 0xFFFFFF));
			spr.x = rndFloat(0, gameWidth);
			spr.y = rndFloat(0, gameHeight);

			var targetObject = {};
			if (posEnabled) {
				targetObject.x = spr.x + rndFloat(-300, 300);
				targetObject.y = spr.y + rndFloat(-300, 300);
			}
			if (rotEnabled) targetObject.rotation = rndFloat(-180, 180);
			if (scaleEnabled) {
				targetObject.scaleX = rndFloat(0.5, 1.5);
				targetObject.scaleY = rndFloat(0.5, 1.5);
			}
			if (alphaEnabled) targetObject.alpha = rndFloat(0.25, 1);

			tween(spr, timerTime, targetObject, { onComplete: function() {
				spr.destroy();
			}});
		});
	}, -1);

	clearFunctions.push(function() {
		benchTimer.destroy();
	});
}
`
---
:tooltipTest
This sprite displays a tooltip when you hover it.
!`
var spr = addRectImage(128, 128, 0xFF0000);
spr.x = 300;
spr.y = 300;
spr.whileHovering = function() {
	showTooltip("This is a longer test tooltip, how are you today?");
}
`

[Go back|scratchModStart]
---
:wordWrapTest
This is a word wrap test.

!`
var wwField = addEmptyImage(gameWidth, gameHeight);
var wwRect = addRectImage(1, 1, 0x0000FF);
wwRect.alpha = 0.3;

var wwWidth = 0;

function drawText() {
	if (wwWidth <= 100) wwWidth = 1024;
	wwField.tint = 0xFFFFFFFF;
	wwField.setWordWrapWidth(wwWidth);
	wwField.setText("");
	wwField.setText("This is some test text. This is some test text. This is some test text. Loooooooooooooooooooooooooong word.");
	wwField.x = 100;
	wwField.y = 100;

	wwRect.x = wwField.x;
	wwRect.y = wwField.y;
	wwRect.scaleX = wwWidth;
	wwRect.scaleY = wwField.textHeight;
}

addChoice("-10", function() {
	wwWidth -= 10;
	drawText();
});

addChoice("+10", function() {
	wwWidth += 10;
	drawText();
});
addChoice("Go back", "scratchModStart");
`
---
:rpgTest
!`
disableExit();
choicesPerPage = 8;

addChoice("No AI", function() {
	data.testRpgSetting = "noAi";
	execAsset("testRpg.phore");
});

addChoice("Simple AI", function() {
	data.testRpgSetting = "simpleAi";
	execAsset("testRpg.phore");
});

addChoice("Hard AI", function() {
	data.testRpgSetting = "hardAi";
	execAsset("testRpg.phore");
});

if (internal) {
	addChoice("Shields", function() {
		data.testRpgSetting = "rpgShields";
		execAsset("testRpg.phore");
	});

	addChoice("Porcupines", function() {
		data.testRpgSetting = "rpgPorcupines";
		execAsset("testRpg.phore");
	});

	addChoice("Spawners", function() {
		data.testRpgSetting = "rpgSpawners";
		execAsset("testRpg.phore");
	});

	addChoice("Exploders", function() {
		data.testRpgSetting = "rpgExploders";
		execAsset("testRpg.phore");
	});

	addChoice("Immortals", function() {
		data.testRpgSetting = "rpgImmortals";
		execAsset("testRpg.phore");
	});
}

// addChoice("Go back", "scratchModStart");

// addChoice("Magi demo", function() {
// 	execAsset("magiDemo.phore");
// });
`
---
:vnTest2

---
:vnTest
!`
vn.init();
vn.set(0, "writer/characters/john/john", 0xFF005500);
vn.moveIn(0);
vn.say(0, "Hullo?");
vn.choice("Hello!! Have you seen a green cat?");
vn.stop();
vn.say(0, "Oh. Nope. Have you seen a little fox in a turtleneck?");
vn.choice("No...");
vn.stop();
vn.say(0, "How many of us are in here?");
vn.stop();
vn.choice("There's at least one more.");
vn.stop();
vn.choice("She's a little spaz, we'll find her in no time.");
vn.stop();
vn.choice("Oh god.");
vn.stop();
vn.say(0, "Oh. Nope. Have you seen a little fox in a turtleneck?");
vn.say(0, "What?");
vn.choice("Just listen to yourself.");
vn.stop();
vn.say(0, "Um.");
vn.choice("You would make an adorable librarian.");
vn.stop();
vn.say(0, "A-Ah...");
vn.choice("And you look like a nerd in that shirt.");
vn.stop();
vn.say(0, "Listen...");
vn.say(0, "We're trapped.");
vn.choice("The ");
vn.say(0, "Hello?");
vn.choice("Oh god.");
vn.say(0, "Hello?");
vn.choice("Oh god.");
vn.say(0, "Hello?");
vn.choice("Oh god.");
vn.say(0, "Hello?");
vn.choice("Oh god.");
vn.say(0, "Hello?");
vn.choice("Oh god.");
vn.say(0, "Hello?");
vn.choice("Oh god.");
vn.say(0, "Hello?");
vn.choice("Oh god.");
vn.say(0, "Hello?");
vn.choice("Oh god.");
vn.say(0, "Hello?");

vn.set(1, "writer/characters/redder/redder", 0xFF550000);
vn.moveIn(1);

vn.say(1, "Yo.");
vn.say(1, "");
vn.choice("test 1 first");
vn.choice("test 1 second");
vn.say(1, "You should of had to choose one before getting here");
vn.choice("Pick this to freeze", function() {
});
vn.choice("Pick this to <i>not</i> freeze", function() {
});

vn.fadeOut(1);
vn.set(1, "writer/characters/thelly/thelly", 0xFF550000);
vn.fadeIn(1);

vn.effect(1, "shake");
vn.say(1, "Effect!");

vn.setTextZoomOut();
vn.say(0, "Nice effect, check out this text zooming-out text (Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark)");
vn.say(0, "Look at how it slows down a lot with this third parameter", 3);

vn.resetTextModes();
vn.setTextZoomOut();
vn.setTextJiggle(2, 2);
vn.say(1, "It can be jiggling as well", 3);

vn.resetTextModes();
vn.setTextRainbow();
vn.say(0, "Look, rainbows!");

vn.resetTextModes();
vn.setTextWave(10, 10, 5);
vn.say(0, "And wave effect, but sadly it leave the bounds at the top left, possible solution, move all text 20px down and too the right, but then it won't be centered");

vn.resetTextModes();
vn.setTextZoomIn();
vn.say(1, "And this wispering thing...", 3);

vn.resetTextModes();
vn.setTextZoomOut();
vn.setTextJiggle(2, 2);
vn.setTextRainbow();
vn.setTextWave(10, 10, 5);
vn.say(0, "Most effects can be combined! (Except zoom in and zoom out)", 3);

vn.delay(0.5);
vn.moveOut(0);
vn.moveOut(1);
vn.resetTextModes();
vn.choice("Go back", function() {
	gotoPassage("scratchModStart");
});
vn.deinit();`

---
:vnTest
!`
vn.init();
vn.set(0, "writer/characters/ren/ren", 0xFF005500);
vn.moveIn(0);
vn.say(0, "Hello?");

vn.set(1, "writer/characters/thelly/thelly", 0xFF550000);
vn.moveIn(1);

vn.say(1, "Yo");
vn.say(1, "Here's a choice test");
vn.choice("test 1 first");
vn.choice("test 1 second");
vn.say(1, "You should of had to choose one before getting here");
vn.choice("Pick this to freeze", function() {
});
vn.choice("Pick this to <i>not</i> freeze", function() {
});

vn.fadeOut(1);
vn.set(1, "writer/characters/thelly/thelly", 0xFF550000);
vn.fadeIn(1);

vn.effect(1, "shake");
vn.say(1, "Effect!");

vn.setTextZoomOut();
vn.say(0, "Nice effect, check out this text zooming-out text (Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark)");
vn.say(0, "Look at how it slows down a lot with this third parameter", 3);

vn.resetTextModes();
vn.setTextZoomOut();
vn.setTextJiggle(2, 2);
vn.say(1, "It can be jiggling as well", 3);

vn.resetTextModes();
vn.setTextRainbow();
vn.say(0, "Look, rainbows!");

vn.resetTextModes();
vn.setTextWave(10, 10, 5);
vn.say(0, "And wave effect, but sadly it leave the bounds at the top left, possible solution, move all text 20px down and too the right, but then it won't be centered");

vn.resetTextModes();
vn.setTextZoomIn();
vn.say(1, "And this wispering thing...", 3);

vn.resetTextModes();
vn.setTextZoomOut();
vn.setTextJiggle(2, 2);
vn.setTextRainbow();
vn.setTextWave(10, 10, 5);
vn.say(0, "Most effects can be combined! (Except zoom in and zoom out)", 3);

vn.delay(0.5);
vn.moveOut(0);
vn.moveOut(1);
vn.resetTextModes();
vn.choice("Go back", function() {
	gotoPassage("scratchModStart");
});
vn.deinit();`


---
:vnTest
!`
vn.init();
vn.set(0, "writer/characters/ren/ren", 0xFF005500);
vn.moveIn(0);
vn.say(0, "Hello?");

vn.set(1, "writer/characters/thelly/thelly", 0xFF550000);
vn.moveIn(1);

vn.say(1, "Yo");
vn.say(1, "Here's a choice test");
vn.choice("test 1 first");
vn.choice("test 1 second");
vn.stop();
vn.say(1, "You should of had to choose one before getting here");
vn.choice("Pick this to freeze", function() {
});
vn.choice("Pick this to <i>not</i> freeze", function() {
});
vn.stop();

vn.fadeOut(1);
vn.set(1, "writer/characters/thelly/thelly", 0xFF550000);
vn.fadeIn(1);

vn.effect(1, "shake");
vn.say(1, "Effect!");

vn.setTextZoomOut();
vn.say(0, "Nice effect, check out this text zooming-out text (Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark Benchmark)");
vn.say(0, "Look at how it slows down a lot with this third parameter", 3);

vn.resetTextModes();
vn.setTextZoomOut();
vn.setTextJiggle(2, 2);
vn.say(1, "It can be jiggling as well", 3);

vn.resetTextModes();
vn.setTextRainbow();
vn.say(0, "Look, rainbows!");

vn.resetTextModes();
vn.setTextWave(10, 10, 5);
vn.say(0, "And wave effect, but sadly it leave the bounds at the top left, possible solution, move all text 20px down and too the right, but then it won't be centered");

vn.resetTextModes();
vn.setTextZoomIn();
vn.say(1, "And this wispering thing...", 3);

vn.resetTextModes();
vn.setTextZoomOut();
vn.setTextJiggle(2, 2);
vn.setTextRainbow();
vn.setTextWave(10, 10, 5);
vn.say(0, "Most effects can be combined! (Except zoom in and zoom out)", 3);

vn.delay(0.5);
vn.moveOut(0);
vn.moveOut(1);
vn.resetTextModes();
vn.choice("Go back", function() {
	gotoPassage("scratchModStart");
});
vn.stop();
vn.deinit();`

---
:weirdChoiceTest
!`
for (var i = 0; i < 9; i++) addChoice("Test");
vn.choice("Go back", function() {
	gotoPassage("scratchModStart");
});

hookTempUpdate(function() {
	choicesPerPage = time % 10;
});
`
---
:newMapTest
This is where you can test the new map!

[Test map!|startNewMap]
[New LLL!|startNewMapLLL]
[New Earth!|startNewMapEarth]
[Non-functional map!|startNonfunctionNewMap]
---
:startNewMapLLL
!`
worldMap.clear();

var entry;

entry = worldMap.createNode("Scene 1", "testMapScene1");
entry.seenUnlocked = entry.unlocked = true;

entry = worldMap.createNode("Scene 2", "testMapScene2", RIGHT, "Scene 1");

entry = worldMap.createNode("Scene 3", "testMapScene3", BOTTOM, "Scene 1");

entry = worldMap.createNode("Back to map test", "newMapTest", TOP, "Scene 1");
entry.seenUnlocked = entry.unlocked = true;

worldMap.show();
`
---
:startNewMap
!`
worldMap.clear();

var entry;

entry = worldMap.createNode("Scene 1", "testMapScene1");
entry.seenUnlocked = entry.unlocked = true;

entry = worldMap.createNode("Scene 2", "testMapScene2", RIGHT, "Scene 1");

entry = worldMap.createNode("Scene 3", "testMapScene3", BOTTOM, "Scene 1");

entry = worldMap.createNode("Back to map test", "newMapTest", TOP, "Scene 1");
entry.seenUnlocked = entry.unlocked = true;

worldMap.show();
`
---
:startNonfunctionNewMap
!`
worldMap.clear();

var entry;
entry = worldMap.createNode("Back to map test", "newMapTest");
entry.seenUnlocked = entry.unlocked = true;

entry = worldMap.createNode("Nonfunctional node 1", "not_yet_set", BOTTOM, "Back to map test");
entry = worldMap.createNode("Nonfunctional node 2", "not_yet_set", TOP, "Back to map test");
entry = worldMap.createNode("Nonfunctional node 3", "not_yet_set", LEFT, "Back to map test");
entry = worldMap.createNode("Nonfunctional node 4", "not_yet_set", RIGHT, "Back to map test");

worldMap.show();
`
---
:testMapScene1
You're in scene1!
[Back|startNewMap]
[Next|testMapScene1b]
---
:testMapScene1b
You're in scene1b, and have unlocked scene2!
!`
worldMap.completeEntry("Scene 1");
worldMap.unlockEntry("Scene 2");
worldMap.unlockEntry("Scene 3");
`
[Back|startNewMap]
---
:testMapScene2
You're in scene2!
[Back|startNewMap]
---
:testMapScene3
You're in scene3!
[Back|startNewMap]
---
:Exit
`exitMod();`
END_PASSAGES

function gotoScratch() {
	clearNodes();

	submitNode("Back", "scratchModStart");
	submitNode("Scene 1", "unlockNodes1");
	attachNode("Back", "Scene 1", RIGHT);

	submitNode("Locked Scene", "unlockNodesLocked");
	attachNode("Scene 1", "Locked Scene", RIGHT);

	setNodeLocked("Locked Scene", function() {
		return data.finishedScene1;
	});

	gotoMap();

	setBackground(0, "writer/mainBg");
}
